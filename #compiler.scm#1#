#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 21459 0 24 3 1 #"("
0 0 14 3 4 #"load"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"./pc.scm\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"load"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"./pattern-matcher.scm\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"<whitespace>"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"const"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"ch"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"char<=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ch"
0 0 24 3 1 #" "
0 0 21 3 7 #"#\\space"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"<line-comment>"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 21 #"<end-of-line-comment>"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 3 #"new"
0 0 24 3 2 #" ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 9 #"#\\newline"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 14 #"<end-of-input>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"*disj"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 0 14 3 4 #"done"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"new"
0 0 24 3 2 #" ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\;"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 10 #"<any-char>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 21 #"<end-of-line-comment>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #" "
0 0 14 3 5 #"*diff"
0 0 24 3 1 #" "
0 0 14 3 5 #"*star"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 21 #"<end-of-line-comment>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #" "
0 0 14 3 4 #"done"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"<sexpr-comment>"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"new"
0 0 24 3 2 #" ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"word"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#;\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" () "
0 0 14 3 7 #"<sexpr>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"<infix-comment>"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"new"
0 0 24 3 2 #" ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"word"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#;\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" () "
0 0 14 3 17 #"<InfixExpression>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"<comment>"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"disj"
0 0 24 3 1 #" "
0 0 14 3 14 #"<line-comment>"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 14 3 15 #"<sexpr-comment>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"<comment-infix>"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"disj"
0 0 24 3 1 #" "
0 0 14 3 14 #"<line-comment>"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 14 3 15 #"<infix-comment>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"<skip>"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"disj"
0 0 24 3 1 #" "
0 0 14 3 9 #"<comment>"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 14 3 12 #"<whitespace>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"<skip-infix>"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"disj"
0 0 24 3 1 #" "
0 0 14 3 15 #"<comment-infix>"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 14 3 12 #"<whitespace>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"times-4"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"<p>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"disj"
0 0 24 3 2 #" ("
0 0 14 3 5 #"times"
0 0 24 3 1 #" "
0 0 14 3 3 #"<p>"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 5 #"times"
0 0 24 3 1 #" "
0 0 14 3 3 #"<p>"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 5 #"times"
0 0 24 3 1 #" "
0 0 14 3 3 #"<p>"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 5 #"times"
0 0 24 3 1 #" "
0 0 14 3 3 #"<p>"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"^^<wrapped>"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"<wrapper>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"<p>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"new"
0 0 24 3 2 #" ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 9 #"<wrapper>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 3 #"<p>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 9 #"<wrapper>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"*pack-with"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"_left"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 6 #"_right"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"   "
0 0 14 3 4 #"done"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"^<skipped*>"
0 0 24 3 2 #" ("
0 0 14 3 11 #"^^<wrapped>"
0 0 24 3 2 #" ("
0 0 14 3 4 #"star"
0 0 24 3 1 #" "
0 0 14 3 6 #"<skip>"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"^<skipped-infix*>"
0 0 24 3 2 #" ("
0 0 14 3 11 #"^^<wrapped>"
0 0 24 3 2 #" ("
0 0 14 3 4 #"star"
0 0 24 3 1 #" "
0 0 14 3 12 #"<skip-infix>"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"<Boolean>"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\#"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 7 #"char-ci"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 9 #"        ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\#"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 7 #"char-ci"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 9 #"        ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 5 #"*disj"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 10 #"*pack-with"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\t"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\T"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"<CharPrefix>"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"new"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\#"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\\\"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"<VisibleSimpleChar>"
0 0 24 3 2 #" ("
0 0 14 3 5 #"range"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\!"
0 0 24 3 1 #" "
0 0 26 3 5 #"#\\xff"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"<NamedChar>"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 7 #"word-ci"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"lambda\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 7 #"word-ci"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"newline\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 7 #"word-ci"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"nul\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 7 #"word-ci"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"page\""
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 7 #"word-ci"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"return\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 7 #"word-ci"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"space\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 7 #"word-ci"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"tab\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 5 #"*disj"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"*pack"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->string"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 19 3 8 #"\"lambda\""
0 0 24 3 2 #") "
0 0 21 3 3 #"#\\x"
0 0 14 3 4 #"03bb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->string"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 19 3 9 #"\"newline\""
0 0 24 3 2 #") "
0 0 21 3 9 #"#\\newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->string"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"nul\""
0 0 24 3 2 #") "
0 0 21 3 5 #"#\\nul"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->string"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"page\""
0 0 24 3 2 #") "
0 0 21 3 6 #"#\\page"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->string"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 19 3 8 #"\"return\""
0 0 24 3 2 #") "
0 0 21 3 8 #"#\\return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->string"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"space\""
0 0 24 3 2 #") "
0 0 21 3 7 #"#\\space"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->string"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"tab\""
0 0 24 3 2 #") "
0 0 21 3 5 #"#\\tab"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"error\""
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"<HexChar>"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 5 #"range"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\9"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 5 #"range"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\a"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"*disj"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"<HexUnicodeChar>"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 7 #"char-ci"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 7 #"times-4"
0 0 24 3 1 #" "
0 0 14 3 9 #"<HexChar>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 9 #"<HexChar>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 16 #"*not-followed-by"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 8 #"       ("
0 0 14 3 13 #"integer->char"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->number"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->string"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 21 3 2 #"16"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"<SymbolChar>"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 5 #"range"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\9"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 5 #"range"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\a"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 5 #"range"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\A"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\Z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\!"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\$"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\^"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\*"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\-"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\_"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\="
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\+"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\<"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\/"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\:"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"*disj"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"<Char>"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 12 #"<CharPrefix>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 11 #"<NamedChar>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 16 #"<HexUnicodeChar>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 19 #"<VisibleSimpleChar>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 9 #"<HexChar>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 16 #"*not-followed-by"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"*disj"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 14 3 1 #"b"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"<Natural>"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 5 #"range"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\9"
0 0 24 3 3 #")) "
0 0 14 3 5 #"*plus"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"*pack"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 13 #"            ("
0 0 14 3 14 #"string->number"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->string"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"<Integer>"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\+"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\-"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"*disj"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 9 #"<Natural>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\+"
0 0 24 3 2 #") "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 9 #"<Natural>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"*disj"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"<Fraction>"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 9 #"<Integer>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\/"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 9 #"<Natural>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 9 #"        ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"<Number>"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 3 #"new"
0 0 24 3 4 #"   ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 10 #"<Fraction>"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 8 #"       ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 9 #"<Integer>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 8 #"       ("
0 0 14 3 5 #"*disj"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 8 #"       ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 12 #"<SymbolChar>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 8 #"       ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 9 #"<Natural>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"       "
0 0 14 3 5 #"*diff"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"       "
0 0 14 3 16 #"*not-followed-by"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"<StringVisibleChar>"
0 0 24 3 2 #" ("
0 0 14 3 4 #"diff"
0 0 24 3 1 #" "
0 0 14 3 10 #"<any-char>"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\\\"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"<StringMetaChar>"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\\\"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\\\"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 7 #"char-ci"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 7 #"char-ci"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 7 #"char-ci"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\n"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 7 #"char-ci"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\r"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"*disj"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\\\"
0 0 24 3 2 #") "
0 0 21 3 3 #"#\\\\"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 17 #"               (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\\""
0 0 24 3 2 #") "
0 0 21 3 3 #"#\\\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 17 #"               (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\t"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\T"
0 0 24 3 3 #")) "
0 0 21 3 5 #"#\\tab"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 17 #"               (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\f"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\F"
0 0 24 3 3 #")) "
0 0 26 3 4 #"#\\xc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 17 #"               (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\n"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\N"
0 0 24 3 3 #")) "
0 0 26 3 4 #"#\\xa"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 17 #"               (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\r"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\R"
0 0 24 3 3 #")) "
0 0 26 3 4 #"#\\xd"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"<StringHexChar>"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\\\"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 7 #"char-ci"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 7 #"times-4"
0 0 24 3 1 #" "
0 0 14 3 9 #"<HexChar>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\;"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 13 #"integer->char"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->number"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->string"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 21 3 2 #"16"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"<StringChar>"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 15 #"<StringHexChar>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 16 #"<StringMetaChar>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 19 #"<StringVisibleChar>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"*disj"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"<String>"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\\""
0 0 24 3 4 #"))  "
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 12 #"<StringChar>"
0 0 24 3 3 #") ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\\""
0 0 24 3 3 #")) "
0 0 14 3 5 #"*diff"
0 0 24 3 1 #" "
0 0 14 3 5 #"*star"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 8 #"       ("
0 0 14 3 12 #"list->string"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"<Symbol>"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 12 #"<SymbolChar>"
0 0 24 3 2 #") "
0 0 14 3 5 #"*plus"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"*pack"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 15 #"string-downcase"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->string"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"<ProperList>"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\("
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" () "
0 0 14 3 7 #"<sexpr>"
0 0 24 3 3 #")) "
0 0 14 3 5 #"*star"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\)"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 14 3 1 #"b"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"<ImproperList>"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\("
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" () "
0 0 14 3 7 #"<sexpr>"
0 0 24 3 3 #")) "
0 0 14 3 5 #"*plus"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" () "
0 0 14 3 7 #"<sexpr>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\)"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 2 #",@"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"d"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        )"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"<Vector>"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\#"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\("
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" () "
0 0 14 3 7 #"<sexpr>"
0 0 24 3 3 #")) "
0 0 14 3 5 #"*star"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\)"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"<Quoted>"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\'"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #"()  "
0 0 14 3 7 #"<sexpr>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 2 #"`'"
0 0 28 3 1 #","
0 0 14 3 1 #"b"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"<QuasiQuoted>"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\`"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #"()  "
0 0 14 3 7 #"<sexpr>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"quasiquote"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"<Unquoted>"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\,"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #"()  "
0 0 14 3 7 #"<sexpr>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"unquote"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 19 #")))                "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"done"
0 0 24 3 10 #"))        "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"<UnquotedAndSpliced>"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\,"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\@"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #"()  "
0 0 14 3 7 #"<sexpr>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 16 #"unquote-splicing"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"last-elem"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"remove-last-elem"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 7 #"reverse"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"char->symbol"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\+"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\-"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\/"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"/"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\*"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"infix-pack-l"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 14 3 1 #"a"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 9 #"fold-left"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 12 #"char->symbol"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")) "
0 0 28 3 1 #","
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))) "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 10 #"))))      "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"infix-pack-s-l"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 14 3 1 #"a"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 9 #"fold-left"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))) "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 11 #")))))      "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"infix-pack-s-r"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 14 3 1 #"a"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 8 #"b-values"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 9 #"last-elem"
0 0 24 3 2 #" ("
0 0 14 3 9 #"last-elem"
0 0 24 3 1 #" "
0 0 14 3 8 #"b-values"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 9 #"b-reduced"
0 0 24 3 2 #" ("
0 0 14 3 16 #"remove-last-elem"
0 0 24 3 1 #" "
0 0 14 3 8 #"b-values"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 7 #"b-final"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 9 #"b-reduced"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 10 #"fold-right"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"y"
0 0 24 3 3 #")) "
0 0 14 3 9 #"last-elem"
0 0 24 3 1 #" "
0 0 14 3 7 #"b-final"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"        ))      "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 28 #"<InfixPrefixExtensionPrefix>"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\#"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\#"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\#"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\%"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"*disj"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"<InfixAddSub>"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 3 #"new"
0 0 24 3 6 #"     ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #"() "
0 0 14 3 13 #"<InfixMulDiv>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\+"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\-"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"*disj"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #"() "
0 0 14 3 13 #"<InfixMulDiv>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 5 #"*star"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 1 #" "
0 0 14 3 12 #"infix-pack-l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"<InfixMulDiv>"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 3 #"new"
0 0 24 3 6 #"     ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #"() "
0 0 14 3 10 #"<InfixPow>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\*"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\/"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"*disj"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #"() "
0 0 14 3 10 #"<InfixPow>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 5 #"*star"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 1 #" "
0 0 14 3 12 #"infix-pack-l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"<PowerSymbol>"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 3 #"new"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"word"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"**\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\^"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"*disj"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"<InfixPow>"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 3 #"new"
0 0 24 3 6 #"     ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #"() ("
0 0 14 3 17 #"^<skipped-infix*>"
0 0 24 3 1 #" "
0 0 14 3 16 #"<InfixFuncArray>"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 13 #"<PowerSymbol>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #"() ("
0 0 14 3 17 #"^<skipped-infix*>"
0 0 24 3 1 #" "
0 0 14 3 16 #"<InfixFuncArray>"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 5 #"*star"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 14 3 14 #"infix-pack-s-r"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"expt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"<InfixFuncArray>"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 3 #"new"
0 0 24 3 6 #"     ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #"() "
0 0 14 3 11 #"<InfixLast>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\["
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #"() "
0 0 14 3 17 #"<InfixExpression>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\]"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"arr"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\("
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #"() "
0 0 14 3 14 #"<InfixArgList>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\)"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"func"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"*disj"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 5 #"*star"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 9 #"fold-left"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"y-op"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"y-op"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"arr"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"<InfixArrayGet>"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 3 #"new"
0 0 24 3 6 #"     ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #"() ("
0 0 14 3 17 #"^<skipped-infix*>"
0 0 24 3 1 #" "
0 0 14 3 14 #"<InfixFuncall>"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\["
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #"() "
0 0 14 3 17 #"<InfixExpression>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\]"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 5 #"*star"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 9 #"<epsilon>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"*disj"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 14 3 14 #"infix-pack-s-l"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"vector-ref"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"<InfixFuncall>"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 3 #"new"
0 0 24 3 6 #"     ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #"() "
0 0 14 3 11 #"<InfixLast>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\("
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #"() "
0 0 14 3 14 #"<InfixArgList>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\)"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 5 #"*star"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 9 #"<epsilon>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"*disj"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 14 3 1 #"a"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 9 #"fold-left"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 24 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))) "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 10 #"))))      "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"<InfixArgList>"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #"() "
0 0 14 3 17 #"<InfixExpression>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\,"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #"() "
0 0 14 3 17 #"<InfixExpression>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 5 #"*star"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"*pack"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 17 #"^<skipped-infix*>"
0 0 24 3 1 #" "
0 0 14 3 9 #"<epsilon>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"*disj"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"<InfixParen>"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\("
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" () "
0 0 14 3 17 #"<InfixExpression>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\)"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 14 3 1 #"b"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"done"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"<InfixSexprEscape>"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" () "
0 0 14 3 28 #"<InfixPrefixExtensionPrefix>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" () "
0 0 14 3 7 #"<sexpr>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 14 3 1 #"b"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"<InfixNeg>"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\-"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" () "
0 0 14 3 16 #"<InfixFuncArray>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"<InfixLast>"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 17 #"^<skipped-infix*>"
0 0 24 3 1 #" "
0 0 14 3 18 #"<InfixSexprEscape>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 17 #"^<skipped-infix*>"
0 0 24 3 1 #" "
0 0 14 3 12 #"<InfixParen>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #"() ("
0 0 14 3 17 #"^<skipped-infix*>"
0 0 24 3 1 #" "
0 0 14 3 13 #"<InfixNumber>"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 17 #"^<skipped-infix*>"
0 0 24 3 1 #" "
0 0 14 3 10 #"<InfixNeg>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"*delayed"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #"() ("
0 0 14 3 17 #"^<skipped-infix*>"
0 0 24 3 1 #" "
0 0 14 3 13 #"<InfixSymbol>"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"*disj"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"<InfixExpression>"
0 0 24 3 1 #" "
0 0 14 3 13 #"<InfixAddSub>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"<InfixSymbol>"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 12 #"<SymbolChar>"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\+"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\-"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\*"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\^"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\/"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 2 #" ("
0 0 14 3 4 #"word"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"**\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"*disj"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #") "
0 0 14 3 5 #"*diff"
0 0 24 3 1 #" "
0 0 14 3 5 #"*plus"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"*pack"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 15 #"string-downcase"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->string"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"<InfixNumber>"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 3 #"new"
0 0 24 3 4 #"   ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 10 #"<Fraction>"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 8 #"       ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 9 #"<Integer>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 8 #"       ("
0 0 14 3 5 #"*disj"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 8 #"       ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 13 #"<InfixSymbol>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 8 #"       ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 9 #"<Natural>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"       "
0 0 14 3 5 #"*diff"
0 0 24 3 1 #" "
0 0 14 3 16 #"*not-followed-by"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"<InfixExtension>"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"new"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 28 #"<InfixPrefixExtensionPrefix>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"*parser"
0 0 24 3 1 #" "
0 0 14 3 17 #"<InfixExpression>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"*caten"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"*pack-with"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 1 #"b"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"done"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"<sexpr>"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 7 #"parsers"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 9 #"<Boolean>"
0 0 24 3 1 #" "
0 0 14 3 6 #"<Char>"
0 0 24 3 1 #" "
0 0 14 3 8 #"<Number>"
0 0 24 3 1 #" "
0 0 14 3 8 #"<Symbol>"
0 0 24 3 1 #" "
0 0 14 3 8 #"<String>"
0 0 24 3 1 #" "
0 0 14 3 12 #"<ProperList>"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 14 #"<ImproperList>"
0 0 24 3 1 #" "
0 0 14 3 8 #"<Vector>"
0 0 24 3 1 #" "
0 0 14 3 8 #"<Quoted>"
0 0 24 3 1 #" "
0 0 14 3 13 #"<QuasiQuoted>"
0 0 24 3 1 #" "
0 0 14 3 10 #"<Unquoted>"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 20 #"<UnquotedAndSpliced>"
0 0 24 3 1 #" "
0 0 14 3 16 #"<InfixExtension>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 15 #"parsers-skipped"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 11 #"^<skipped*>"
0 0 24 3 1 #" "
0 0 14 3 7 #"parsers"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 4 #"disj"
0 0 24 3 1 #" "
0 0 14 3 15 #"parsers-skipped"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"const-pattern-rule"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"pred"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"pattern-rule"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pred"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"_boolean"
0 0 24 3 2 #" ("
0 0 14 3 18 #"const-pattern-rule"
0 0 24 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"_character"
0 0 24 3 2 #" ("
0 0 14 3 18 #"const-pattern-rule"
0 0 24 3 1 #" "
0 0 14 3 5 #"char?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"_number"
0 0 24 3 2 #" ("
0 0 14 3 18 #"const-pattern-rule"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"_string"
0 0 24 3 2 #" ("
0 0 14 3 18 #"const-pattern-rule"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"_vector"
0 0 24 3 2 #" ("
0 0 14 3 18 #"const-pattern-rule"
0 0 24 3 1 #" "
0 0 14 3 7 #"vector?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"_void"
0 0 24 3 2 #" ("
0 0 14 3 18 #"const-pattern-rule"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"void"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"_quote"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 12 #"pattern-rule"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 5 #"quote"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"exp"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"_const"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 16 #"compose-patterns"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 7 #"_vector"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 8 #"_boolean"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 10 #"_character"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 7 #"_number"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 7 #"_string"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 6 #"_quote"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 5 #"_void"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"*reserved-words*"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 15 3 2 #"do"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 15 3 6 #"lambda"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 15 3 4 #"let*"
0 0 24 3 1 #" "
0 0 15 3 6 #"letrec"
0 0 24 3 1 #" "
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 10 #"quasiquote"
0 0 24 3 1 #" "
0 0 14 3 7 #"unquote"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 16 #"unquote-splicing"
0 0 24 3 1 #" "
0 0 14 3 5 #"quote"
0 0 24 3 1 #" "
0 0 14 3 4 #"set!"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"_var"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"pattern-rule"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 16 #"*reserved-words*"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"_if"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 16 #"compose-patterns"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"pattern-rule"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"test"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"then"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"else"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 4 #"then"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 3 #"if3"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 4 #"then"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"pattern-rule"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"test"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"then"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 4 #"then"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 3 #"if3"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 4 #"then"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 4 #"void"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"_or"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"pattern-rule"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"bodies"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"bodies"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 3 #"'#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"_and"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"pattern-rule"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"bodies"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"bodies"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 3 #"'#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 24 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"improper-list-last"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 18 #"improper-list-last"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #")) "
0 0 14 3 1 #"l"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 25 #"improper-list-remove-last"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 25 #"improper-list-remove-last"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"remove-duplicates"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 6 #"member"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #")) ("
0 0 14 3 17 #"remove-duplicates"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 17 #"remove-duplicates"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"is-distinct"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 17 #"remove-duplicates"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"_lambda"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"pattern-rule"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"params"
0 0 24 3 2 #") "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"bodies"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 11 #"is-distinct"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 26 #"\"Repeating lambda params!\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"bodies"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 10 #"new-params"
0 0 24 3 2 #" ("
0 0 14 3 25 #"improper-list-remove-last"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 3 #"seq"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 14 3 6 #"bodies"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 13 #"lambda-simple"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"seq"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                   (("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 10 #"lambda-opt"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 10 #"new-params"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 18 #"improper-list-last"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 14 3 3 #"seq"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 10 #"lambda-var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"seq"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"_define"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 12 #"pattern-rule"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"var"
0 0 24 3 2 #") "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 15 3 3 #"def"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 15 3 3 #"def"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"exp"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #") "
0 0 28 3 2 #",@"
0 0 15 3 3 #"def"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 3 #"def"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 3 #")) "
0 0 28 3 1 #","
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 15 3 3 #"def"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 15 3 3 #"def"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 3 #"def"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 15 3 3 #"def"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"_application"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 12 #"pattern-rule"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"func"
0 0 24 3 2 #") "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"params"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"func"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"done"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"Unknown form: ~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"func"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 6 #"params"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"applic"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 4 #"func"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 6 #"params"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"_cond"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 12 #"pattern-rule"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"bodies"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"bodies"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"Unknown form: (cond)\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"else"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 24 3 1 #"("
0 0 14 3 4 #"cdar"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 24 3 1 #"("
0 0 14 3 4 #"cdar"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 24 3 1 #"("
0 0 14 3 4 #"cdar"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 4 #")) ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 24 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 9 #")))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"remove-seq"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"bodies"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 2 #") "
0 0 14 3 6 #"bodies"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"seq"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cdar"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"remove-seq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 3 #") ("
0 0 14 3 10 #"remove-seq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"_begin"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 12 #"pattern-rule"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"bodies"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"bodies"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 6 #"bodies"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 6 #"bodies"
0 0 24 3 2 #" ("
0 0 14 3 10 #"remove-seq"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 4 #"void"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 3 #"seq"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 6 #"bodies"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"_let"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 12 #"pattern-rule"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"params"
0 0 24 3 2 #") "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"bodies"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 2 #") "
0 0 28 3 2 #",@"
0 0 14 3 6 #"bodies"
0 0 24 3 3 #")  "
0 0 28 3 2 #",@"
0 0 24 3 1 #"("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"_let*"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 12 #"pattern-rule"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 4 #"let*"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"params"
0 0 24 3 2 #") "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"bodies"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 2 #")("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 14 3 6 #"bodies"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                            (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 14 3 6 #"bodies"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 4 #")) ("
0 0 15 3 4 #"let*"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 2 #") "
0 0 28 3 2 #",@"
0 0 14 3 6 #"bodies"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"_letrec"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 12 #"pattern-rule"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 6 #"letrec"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"params"
0 0 24 3 2 #") "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"bodies"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 10 #"set-bodies"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 3 #") ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 12 #"false-params"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 3 #") ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 10 #"let-bodies"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 15 3 3 #"let"
0 0 24 3 4 #" () "
0 0 28 3 2 #",@"
0 0 14 3 6 #"bodies"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 12 #"false-params"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 24 3 1 #"("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 10 #"set-bodies"
0 0 24 3 1 #" "
0 0 14 3 10 #"let-bodies"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"_set!"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"pattern-rule"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"arg"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 3 #"set"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"_quasiquote"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"pattern-rule"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 10 #"quasiquote"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 9 #"expand-qq"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"^quote?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"tag"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 3 #"tag"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"pair?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"quote?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"^quote?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"quote"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"unquote?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"^quote?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"unquote"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"unquote-splicing?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"^quote?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 16 #"unquote-splicing"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"const?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 24 #"simple-sexprs-predicates"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 5 #"char?"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"p?"
0 0 24 3 3 #") ("
0 0 14 3 2 #"p?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #" "
0 0 14 3 24 #"simple-sexprs-predicates"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"quote?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"quotify"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"vector?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 21 3 2 #"`'"
0 0 28 3 1 #","
0 0 14 3 1 #"e"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 14 3 1 #"e"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"unquotify"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"quote?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 14 3 1 #"e"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-pair?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"quote?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"expand-qq"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 9 #"expand-qq"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 8 #"unquote?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"    (("
0 0 14 3 17 #"unquote-splicing?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"expand-qq"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"       "
0 0 19 3 39 #"\"unquote-splicing here makes no sense!\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"    (("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 17 #"unquote-splicing?"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 9 #"expand-qq"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"     (("
0 0 14 3 17 #"unquote-splicing?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 9 #"expand-qq"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 9 #"expand-qq"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 9 #"expand-qq"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"    (("
0 0 14 3 7 #"vector?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 12 #"list->vector"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 9 #"expand-qq"
0 0 24 3 2 #" ("
0 0 14 3 12 #"vector->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"    (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #")) "
0 0 21 3 2 #"`'"
0 0 28 3 1 #","
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 21 #"optimize-qq-expansion"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 9 #"optimizer"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" () "
0 0 14 3 1 #"e"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 9 #"optimizer"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"compose-patterns"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"pattern-rule"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 21 #"optimize-qq-expansion"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"pattern-rule"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"c1"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-pair?"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"c2"
0 0 24 3 1 #" "
0 0 14 3 6 #"const?"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"e"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"c1"
0 0 24 3 1 #" "
0 0 14 3 2 #"c2"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 14 3 7 #"quotify"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 2 #",@"
0 0 24 3 1 #"("
0 0 14 3 9 #"unquotify"
0 0 24 3 1 #" "
0 0 14 3 2 #"c1"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 9 #"unquotify"
0 0 24 3 1 #" "
0 0 14 3 2 #"c2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"e"
0 0 24 3 2 #" ("
0 0 14 3 21 #"optimize-qq-expansion"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 21 #"optimize-qq-expansion"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"e"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"pattern-rule"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"c1"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-pair?"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"c2"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-pair?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"c1"
0 0 24 3 1 #" "
0 0 14 3 2 #"c2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 14 3 7 #"quotify"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 9 #"unquotify"
0 0 24 3 1 #" "
0 0 14 3 2 #"c1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"unquotify"
0 0 24 3 1 #" "
0 0 14 3 2 #"c2"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 1 #"c"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"pattern-rule"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"e1"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"e2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"e1"
0 0 24 3 2 #" ("
0 0 14 3 21 #"optimize-qq-expansion"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"e2"
0 0 24 3 2 #" ("
0 0 14 3 21 #"optimize-qq-expansion"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"e2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"pattern-rule"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"c1"
0 0 24 3 1 #" "
0 0 14 3 6 #"const?"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"c2"
0 0 24 3 1 #" "
0 0 14 3 6 #"const?"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"e"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"c1"
0 0 24 3 1 #" "
0 0 14 3 2 #"c2"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 14 3 7 #"quotify"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"unquotify"
0 0 24 3 1 #" "
0 0 14 3 2 #"c1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"unquotify"
0 0 24 3 1 #" "
0 0 14 3 2 #"c2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"e"
0 0 24 3 2 #" ("
0 0 14 3 21 #"optimize-qq-expansion"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 21 #"optimize-qq-expansion"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"e"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"pattern-rule"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"e1"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"e2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"e1"
0 0 24 3 2 #" ("
0 0 14 3 21 #"optimize-qq-expansion"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"e2"
0 0 24 3 2 #" ("
0 0 14 3 21 #"optimize-qq-expansion"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"const?"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"const?"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"quotify"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"unquotify"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"unquotify"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"e2"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 21 #"optimize-qq-expansion"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 9 #"expand-qq"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"parse"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"run"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"compose-patterns"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 6 #"_const"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 4 #"_var"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 5 #"_cond"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 3 #"_if"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 3 #"_or"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 4 #"_and"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 7 #"_lambda"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 7 #"_define"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 6 #"_begin"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 4 #"_let"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 5 #"_let*"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 7 #"_letrec"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 5 #"_set!"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 11 #"_quasiquote"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 12 #"_application"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"     )))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"sexpr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" () "
0 0 19 3 21 #"\"Exception in parser\""
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 31 #"eliminate-nested-defines-helper"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 (("
0 0 14 3 10 #"is-lambda?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 (("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"res1"
0 0 24 3 2 #" ("
0 0 14 3 31 #"eliminate-nested-defines-helper"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"res2"
0 0 24 3 2 #" ("
0 0 14 3 31 #"eliminate-nested-defines-helper"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"res1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"res2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"res1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"res2"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 15 3 3 #"def"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"seq"
0 0 24 3 3 #") ("
0 0 14 3 31 #"eliminate-nested-defines-helper"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"is-set?"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"set"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"is-lambda?"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"lambda-simple"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"lambda-var"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"lambda-opt"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"lambda-get-def"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"lambda-get-params"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 16 #"remove-last-elem"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"lambda-get-listed-params"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 15 #"convert-to-list"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 1 #"x"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 15 #"convert-to-list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #")) ("
0 0 14 3 15 #"convert-to-list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 15 #"convert-to-list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"lambda-get-params"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"lambda-get-body"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"eliminate-nested-defines"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 24 #"eliminate-nested-defines"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 24 #"eliminate-nested-defines"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 10 #"is-lambda?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 10 #"lambda-def"
0 0 24 3 2 #" ("
0 0 14 3 14 #"lambda-get-def"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 24 #"eliminate-nested-defines"
0 0 24 3 2 #" ("
0 0 14 3 15 #"lambda-get-body"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 6 #"params"
0 0 24 3 2 #" ("
0 0 14 3 17 #"lambda-get-params"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 3 #"res"
0 0 24 3 2 #" ("
0 0 14 3 31 #"eliminate-nested-defines-helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 2 #"ds"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"res"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 2 #"es"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"res"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ds"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 10 #"lambda-def"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 4 #"vars"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 6 #"cadadr"
0 0 24 3 1 #" "
0 0 14 3 2 #"ds"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 4 #"vals"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 2 #"ds"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 11 #"applic-args"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")) "
0 0 14 3 4 #"vars"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 8 #"let-sets"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 3 #"set"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"var"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 14 3 3 #"val"
0 0 24 3 3 #")) "
0 0 14 3 4 #"vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 8 #"let-body"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 8 #"let-sets"
0 0 24 3 1 #" "
0 0 14 3 2 #"es"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                      "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 10 #"lambda-def"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 14 3 6 #"params"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 6 #"applic"
0 0 24 3 2 #" ("
0 0 14 3 13 #"lambda-simple"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 4 #"vars"
0 0 24 3 2 #" ("
0 0 14 3 3 #"seq"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"let-body"
0 0 24 3 3 #")) "
0 0 28 3 1 #","
0 0 14 3 11 #"applic-args"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 3 #") ("
0 0 14 3 24 #"eliminate-nested-defines"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"applic-lambda-nil?"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 6 #"applic"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"lambda-simple"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"remove-applic-lambda-nil"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 18 #"applic-lambda-nil?"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 24 #"remove-applic-lambda-nil"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cddadr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 24 #"remove-applic-lambda-nil"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 24 #"remove-applic-lambda-nil"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 3 #") ("
0 0 14 3 24 #"remove-applic-lambda-nil"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 12 #"index-helper"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 2 #"-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 3 #"var"
0 0 24 3 2 #") "
0 0 14 3 7 #"counter"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 12 #"index-helper"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 12 #"index-helper"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"find-var-in-acc"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 22 #"find-var-in-acc-helper"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"find-var-in-acc-helper"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"fvar"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"minor"
0 0 24 3 2 #" ("
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 5 #"minor"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 3 #") ("
0 0 14 3 22 #"find-var-in-acc-helper"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"pvar"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 5 #"minor"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"bvar"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 14 3 5 #"minor"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"pe->lex-pe"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 17 #"pe->lex-pe-helper"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"pe->lex-pe-helper"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 3 #")) "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 17 #"pe->lex-pe-helper"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 3 #") ("
0 0 14 3 17 #"pe->lex-pe-helper"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 10 #"is-lambda?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 10 #"lambda-def"
0 0 24 3 2 #" ("
0 0 14 3 14 #"lambda-get-def"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 6 #"params"
0 0 24 3 2 #" ("
0 0 14 3 17 #"lambda-get-params"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 13 #"listed-params"
0 0 24 3 2 #" ("
0 0 14 3 24 #"lambda-get-listed-params"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 15 #"lambda-get-body"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 10 #"lambda-def"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 17 #"pe->lex-pe-helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 13 #"listed-params"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"var"
0 0 24 3 3 #") ("
0 0 14 3 15 #"find-var-in-acc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 3 #") ("
0 0 14 3 17 #"pe->lex-pe-helper"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"last"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"last"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"replace-last"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 12 #"replace-last"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 3 #"var"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"annotate-last-elem"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"elem"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 3 #")) "
0 0 14 3 4 #"elem"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 6 #"applic"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"tc-applic"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"if3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"condition"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 3 #"dit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 3 #"dif"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 3 #"if3"
0 0 24 3 2 #"  "
0 0 28 3 1 #","
0 0 14 3 9 #"condition"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 18 #"annotate-last-elem"
0 0 24 3 1 #" "
0 0 14 3 3 #"dit"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 18 #"annotate-last-elem"
0 0 24 3 1 #" "
0 0 14 3 3 #"dif"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             (("
0 0 14 3 6 #"member"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 8 #"operator"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 8 #"new-last"
0 0 24 3 2 #" ("
0 0 14 3 18 #"annotate-last-elem"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 8 #"new-body"
0 0 24 3 2 #" ("
0 0 14 3 12 #"replace-last"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-last"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"new-body"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"annotate-tc"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 3 #")) "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 11 #"annotate-tc"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"annotate-tc"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 10 #"is-lambda?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 10 #"lambda-def"
0 0 24 3 2 #" ("
0 0 14 3 14 #"lambda-get-def"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 6 #"params"
0 0 24 3 2 #" ("
0 0 14 3 17 #"lambda-get-params"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 11 #"annotate-tc"
0 0 24 3 2 #" ("
0 0 14 3 15 #"lambda-get-body"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 8 #"new-body"
0 0 24 3 2 #" ("
0 0 14 3 18 #"annotate-last-elem"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 10 #"lambda-def"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"new-body"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 3 #") ("
0 0 14 3 11 #"annotate-tc"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"box-set"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 3 #")) "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 7 #"box-set"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"box-set"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 10 #"is-lambda?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 14 #"box-set-helper"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 3 #") ("
0 0 14 3 7 #"box-set"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"fix-order"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 5 #"order"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 10 #"fold-right"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"mem"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 3 #"mem"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"mem"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 14 3 5 #"order"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"box-set-helper"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 10 #"lambda-def"
0 0 24 3 2 #" ("
0 0 14 3 14 #"lambda-get-def"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 6 #"params"
0 0 24 3 2 #" ("
0 0 14 3 17 #"lambda-get-params"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 7 #"box-set"
0 0 24 3 2 #" ("
0 0 14 3 15 #"lambda-get-body"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 13 #"listed-params"
0 0 24 3 2 #" ("
0 0 14 3 24 #"lambda-get-listed-params"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 8 #"set-vars"
0 0 24 3 2 #" ("
0 0 14 3 17 #"remove-duplicates"
0 0 24 3 2 #" ("
0 0 14 3 13 #"find-set-vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 8 #"get-vars"
0 0 24 3 2 #" ("
0 0 14 3 17 #"remove-duplicates"
0 0 24 3 2 #" ("
0 0 14 3 13 #"find-get-vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 13 #"listed-params"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 10 #"bound-vars"
0 0 24 3 2 #" ("
0 0 14 3 17 #"remove-duplicates"
0 0 24 3 2 #" ("
0 0 14 3 15 #"find-bound-vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 13 #"listed-params"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 14 #"params-in-vars"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 13 #"listed-params"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 11 #"vars-to-fix"
0 0 24 3 2 #" ("
0 0 14 3 9 #"fix-order"
0 0 24 3 2 #" ("
0 0 14 3 15 #"member-in-three"
0 0 24 3 1 #" "
0 0 14 3 8 #"set-vars"
0 0 24 3 1 #" "
0 0 14 3 8 #"get-vars"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-vars"
0 0 24 3 2 #") "
0 0 14 3 14 #"params-in-vars"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 11 #"vars-to-fix"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 10 #"lambda-def"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 9 #"set-exprs"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 3 #"set"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"x"
0 0 24 3 4 #"))) "
0 0 14 3 11 #"vars-to-fix"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 10 #"fixed-body"
0 0 24 3 2 #" ("
0 0 14 3 12 #"box-set-vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 11 #"vars-to-fix"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 8 #"new-body"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 10 #"fixed-body"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"seq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 3 #"seq"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 9 #"set-exprs"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 10 #"fixed-body"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 3 #"seq"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 9 #"set-exprs"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 10 #"fixed-body"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 10 #"lambda-def"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"new-body"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"find-set-vars"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 3 #")) "
0 0 14 3 3 #"acc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 13 #"find-set-vars"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 3 #") ("
0 0 14 3 13 #"find-set-vars"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 10 #"is-lambda?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 10 #"lambda-def"
0 0 24 3 2 #" ("
0 0 14 3 14 #"lambda-get-def"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 13 #"listed-params"
0 0 24 3 2 #" ("
0 0 14 3 24 #"lambda-get-listed-params"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 15 #"lambda-get-body"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 17 #"var-listed-params"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 13 #"listed-params"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 3 #"res"
0 0 24 3 2 #" ("
0 0 14 3 13 #"find-set-vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 16 #"remove-from-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"res"
0 0 24 3 1 #" "
0 0 14 3 17 #"var-listed-params"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 7 #"is-set?"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 3 #") ("
0 0 14 3 13 #"find-set-vars"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"find-set-vars"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"find-get-vars"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 14 3 10 #"params-acc"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 3 #")) "
0 0 14 3 3 #"acc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 13 #"find-get-vars"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 14 3 10 #"params-acc"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 3 #") ("
0 0 14 3 13 #"find-get-vars"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 14 3 10 #"params-acc"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 10 #"is-lambda?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 10 #"lambda-def"
0 0 24 3 2 #" ("
0 0 14 3 14 #"lambda-get-def"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 13 #"listed-params"
0 0 24 3 2 #" ("
0 0 14 3 24 #"lambda-get-listed-params"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 15 #"lambda-get-body"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 17 #"var-listed-params"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 13 #"listed-params"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 3 #"res"
0 0 24 3 2 #" ("
0 0 14 3 13 #"find-get-vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 13 #"listed-params"
0 0 24 3 1 #" "
0 0 14 3 10 #"params-acc"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 16 #"remove-from-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"res"
0 0 24 3 1 #" "
0 0 14 3 17 #"var-listed-params"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 7 #"is-set?"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 13 #"find-get-vars"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 14 3 10 #"params-acc"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 10 #"tagged-var"
0 0 24 3 2 #" ("
0 0 14 3 15 #"find-var-in-acc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 14 3 10 #"params-acc"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 10 #"tagged-var"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"bvar"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 10 #"tagged-var"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pvar"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 3 #"acc"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"find-get-vars"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 14 3 10 #"params-acc"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"find-bound-vars"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 14 3 10 #"params-acc"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 3 #")) "
0 0 14 3 3 #"acc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 15 #"find-bound-vars"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 14 3 10 #"params-acc"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 3 #") ("
0 0 14 3 15 #"find-bound-vars"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 14 3 10 #"params-acc"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 10 #"is-lambda?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 10 #"lambda-def"
0 0 24 3 2 #" ("
0 0 14 3 14 #"lambda-get-def"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 13 #"listed-params"
0 0 24 3 2 #" ("
0 0 14 3 24 #"lambda-get-listed-params"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 15 #"lambda-get-body"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 17 #"var-listed-params"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 13 #"listed-params"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 3 #"res"
0 0 24 3 2 #" ("
0 0 14 3 15 #"find-bound-vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 13 #"listed-params"
0 0 24 3 1 #" "
0 0 14 3 10 #"params-acc"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 16 #"remove-from-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"res"
0 0 24 3 1 #" "
0 0 14 3 17 #"var-listed-params"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 10 #"tagged-var"
0 0 24 3 2 #" ("
0 0 14 3 15 #"find-var-in-acc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 14 3 10 #"params-acc"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 10 #"tagged-var"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"bvar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 3 #"acc"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 15 #"find-bound-vars"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 14 3 10 #"params-acc"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"member-in-three"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"l1"
0 0 24 3 1 #" "
0 0 14 3 2 #"l2"
0 0 24 3 1 #" "
0 0 14 3 2 #"l3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 10 #"fold-right"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"mem"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 3 #"mem"
0 0 24 3 1 #" "
0 0 14 3 2 #"l2"
0 0 24 3 3 #") ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 3 #"mem"
0 0 24 3 1 #" "
0 0 14 3 2 #"l3"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"mem"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 14 3 2 #"l1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"remove-from-list"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 14 #"vars-to-remove"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 6 #"member"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 14 #"vars-to-remove"
0 0 24 3 3 #") ("
0 0 14 3 16 #"remove-from-list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 14 #"vars-to-remove"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 16 #"remove-from-list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 14 #"vars-to-remove"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"box-set-vars"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"vars-to-fix"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 3 #")) "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 12 #"box-set-vars"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"vars-to-fix"
0 0 24 3 3 #") ("
0 0 14 3 12 #"box-set-vars"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"vars-to-fix"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"is-set?"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 3 #") ("
0 0 14 3 6 #"member"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"vars-to-fix"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 7 #"box-set"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 28 3 2 #",@"
0 0 24 3 1 #"("
0 0 14 3 12 #"box-set-vars"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"vars-to-fix"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"var"
0 0 24 3 3 #") ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"vars-to-fix"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 7 #"box-get"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 10 #"is-lambda?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 10 #"lambda-def"
0 0 24 3 2 #" ("
0 0 14 3 14 #"lambda-get-def"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 15 #"lambda-get-body"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 6 #"params"
0 0 24 3 2 #" ("
0 0 14 3 17 #"lambda-get-params"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 13 #"listed-params"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"x"
0 0 24 3 4 #")) ("
0 0 14 3 24 #"lambda-get-listed-params"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 10 #"lambda-def"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 12 #"box-set-vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 16 #"remove-from-list"
0 0 24 3 1 #" "
0 0 14 3 11 #"vars-to-fix"
0 0 24 3 1 #" "
0 0 14 3 13 #"listed-params"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 3 #") ("
0 0 14 3 12 #"box-set-vars"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"vars-to-fix"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"file->string"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"in-file"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 7 #"in-port"
0 0 24 3 2 #" ("
0 0 14 3 15 #"open-input-file"
0 0 24 3 1 #" "
0 0 14 3 7 #"in-file"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 3 #"run"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"ch"
0 0 24 3 2 #" ("
0 0 14 3 9 #"read-char"
0 0 24 3 1 #" "
0 0 14 3 7 #"in-port"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 11 #"eof-object?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ch"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 16 #"close-input-port"
0 0 24 3 1 #" "
0 0 14 3 7 #"in-port"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 2 #"ch"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 12 #"list->string"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"full-parse"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 11 #"annotate-tc"
0 0 24 3 2 #" ("
0 0 14 3 10 #"pe->lex-pe"
0 0 24 3 2 #" ("
0 0 14 3 7 #"box-set"
0 0 24 3 2 #" ("
0 0 14 3 24 #"remove-applic-lambda-nil"
0 0 24 3 2 #" ("
0 0 14 3 24 #"eliminate-nested-defines"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"const-nil-register"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"R15\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"const-void-register"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"R14\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"const-true-register"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"R13\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"const-false-register"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"R12\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"const-table-register"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"R11\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"global-table-register"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"R10\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 27 #"symbol-string-list-register"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"R9\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"compile-scheme-file"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"scheme-path"
0 0 24 3 1 #" "
0 0 14 3 11 #"target-path"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 10 #"txt-string"
0 0 24 3 2 #" ("
0 0 14 3 12 #"file->string"
0 0 24 3 1 #" "
0 0 14 3 11 #"scheme-path"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 9 #"expr-list"
0 0 24 3 2 #" ("
0 0 14 3 14 #"read-expr-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"txt-string"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 10 #"full-parse"
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 11 #"const-table"
0 0 24 3 2 #" ("
0 0 14 3 16 #"make-const-table"
0 0 24 3 1 #" "
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 12 #"global-table"
0 0 24 3 2 #" ("
0 0 14 3 17 #"make-global-table"
0 0 24 3 1 #" "
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 8 #"prologue"
0 0 24 3 2 #" ("
0 0 14 3 15 #"create-prologue"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 14 #"code-txt-parts"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 8 #"code-gen"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 14 3 8 #"print-r0"
0 0 24 3 3 #")) "
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 14 #"code-txt-parts"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 10 #"final-code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 8 #"prologue"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 8 #"epilogue"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 11 #"delete-file"
0 0 24 3 1 #" "
0 0 14 3 11 #"target-path"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 11 #"output-file"
0 0 24 3 2 #" ("
0 0 14 3 16 #"open-output-file"
0 0 24 3 1 #" "
0 0 14 3 11 #"target-path"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 10 #"final-code"
0 0 24 3 1 #" "
0 0 14 3 11 #"output-file"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 17 #"close-output-port"
0 0 24 3 1 #" "
0 0 14 3 11 #"output-file"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"fraction?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 8 #"integer?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"rational?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"newline?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 9 #"#\\newline"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"newline-str"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"#\\\\newline\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"print-gensym"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"read-expr-list"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 10 #"txt-string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 10 #"txt-string"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 14 3 10 #"txt-string"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 3 #"acc"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 3 #"res"
0 0 24 3 2 #" ("
0 0 14 3 11 #"test-string"
0 0 24 3 1 #" "
0 0 14 3 7 #"<sexpr>"
0 0 24 3 1 #" "
0 0 14 3 10 #"txt-string"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 3 #"rem"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"res"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 15 3 5 #"match"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cadar"
0 0 24 3 1 #" "
0 0 14 3 3 #"res"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 3 #"rem"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"reverse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 10 #"txt-string"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 7 #"())))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"make-const-table"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 11 #"const-table"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 4 #"void"
0 0 24 3 3 #") ("
0 0 19 3 8 #"\"T_VOID\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 21 3 1 #"1"
0 0 24 3 5 #" () ("
0 0 19 3 7 #"\"T_NIL\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"T_BOOL\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"T_BOOL\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 19 3 11 #"\"T_INTEGER\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 21 3 1 #"9"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 19 3 11 #"\"T_INTEGER\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 21 3 2 #"12"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 19 3 11 #"\"T_INTEGER\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 2 #" ("
0 0 19 3 10 #"\"T_STRING\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 13 #"char->integer"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\a"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 21 3 2 #"18"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 19 3 10 #"\"T_SYMBOL\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"16\""
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 23 #"make-const-table-helper"
0 0 24 3 1 #" "
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"member-const-table"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 3 #")) "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 18 #"member-const-table"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 23 #"const-table-new-address"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"last"
0 0 24 3 2 #" ("
0 0 14 3 9 #"last-elem"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"last"
0 0 24 3 3 #") ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"last"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"const-table-debug"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"fold-left"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"addr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"repr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 7 #"counter"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 9 #"fold-left"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"res"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"[\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"addr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 4 #"))) "
0 0 19 3 5 #"\"]\\t\""
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 8 #"set-box!"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"res"
0 0 24 3 4 #"))) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 14 3 4 #"repr"
0 0 24 3 5 #")))) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 23 #"make-const-table-helper"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               (("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 4 #")) ("
0 0 14 3 23 #"make-const-table-helper"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 2 #") "
0 0 14 3 11 #"const-table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               (("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 23 #"make-const-table-helper"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 2 #") "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 23 #"make-const-table-helper"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 2 #") "
0 0 14 3 11 #"const-table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"const"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 19 #"const-table-unboxed"
0 0 24 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 8 #"set-box!"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 2 #" ("
0 0 14 3 23 #"make-const-table-single"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 2 #") "
0 0 14 3 19 #"const-table-unboxed"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 23 #"make-const-table-helper"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 2 #") "
0 0 14 3 11 #"const-table"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 23 #"make-const-table-single"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 8 #"new-addr"
0 0 24 3 2 #" ("
0 0 14 3 23 #"const-table-new-address"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 11 #"string-repr"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 13 #"char->integer"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 5 #"))) ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 18 #"member-const-table"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 2 #") "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 28 3 1 #","
0 0 14 3 8 #"new-addr"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"val"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 19 3 11 #"\"T_INTEGER\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 9 #"numerator"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #")) "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 11 #"denominator"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 8 #"newline?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 28 3 1 #","
0 0 14 3 8 #"new-addr"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"val"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 19 3 8 #"\"T_CHAR\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"'\\\\n'\""
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 5 #"char?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 28 3 1 #","
0 0 14 3 8 #"new-addr"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"T_CHAR\""
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 13 #"char->integer"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 28 3 1 #","
0 0 14 3 8 #"new-addr"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 19 3 10 #"\"T_STRING\""
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 28 3 2 #",@"
0 0 24 3 1 #"("
0 0 14 3 11 #"string-repr"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 23 #"make-const-table-symbol"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 21 #"make-const-table-pair"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 7 #"vector?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 23 #"make-const-table-vector"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 23 #"make-const-table-symbol"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 3 #"str"
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 9 #"new-table"
0 0 24 3 2 #" ("
0 0 14 3 23 #"make-const-table-single"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 8 #"new-addr"
0 0 24 3 2 #" ("
0 0 14 3 23 #"const-table-new-address"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 8 #"str-addr"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 18 #"member-const-table"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-table"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-table"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 28 3 1 #","
0 0 14 3 8 #"new-addr"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 19 3 10 #"\"T_SYMBOL\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 8 #"str-addr"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"make-const-table-pair"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 11 #"first-table"
0 0 24 3 2 #" ("
0 0 14 3 23 #"make-const-table-single"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #") "
0 0 14 3 11 #"const-table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 12 #"second-table"
0 0 24 3 2 #" ("
0 0 14 3 23 #"make-const-table-single"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #") "
0 0 14 3 11 #"first-table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 8 #"new-addr"
0 0 24 3 2 #" ("
0 0 14 3 23 #"const-table-new-address"
0 0 24 3 1 #" "
0 0 14 3 12 #"second-table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 8 #"car-addr"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 18 #"member-const-table"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #") "
0 0 14 3 12 #"second-table"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 8 #"cdr-addr"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 18 #"member-const-table"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #") "
0 0 14 3 12 #"second-table"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 12 #"second-table"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 28 3 1 #","
0 0 14 3 8 #"new-addr"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"val"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 19 3 8 #"\"T_PAIR\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 8 #"car-addr"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 8 #"cdr-addr"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 23 #"make-const-table-single"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 23 #"make-const-table-vector"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 17 #"boxed-const-table"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"lst"
0 0 24 3 2 #" ("
0 0 14 3 12 #"vector->list"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 8 #"set-box!"
0 0 24 3 1 #" "
0 0 14 3 17 #"boxed-const-table"
0 0 24 3 2 #" ("
0 0 14 3 23 #"make-const-table-single"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 17 #"boxed-const-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 15 #"new-const-table"
0 0 24 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 17 #"boxed-const-table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 8 #"new-addr"
0 0 24 3 2 #" ("
0 0 14 3 23 #"const-table-new-address"
0 0 24 3 1 #" "
0 0 14 3 15 #"new-const-table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"repr-start"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 19 3 10 #"\"T_VECTOR\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 15 #"new-const-table"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 28 3 1 #","
0 0 14 3 8 #"new-addr"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"val"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 10 #"repr-start"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 18 #"member-const-table"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 15 #"new-const-table"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"lst"
0 0 24 3 9 #")))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 33 #"make-const-table-mov-instructions"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 7 #"counter"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 9 #"fold-left"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"repr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 9 #"fold-left"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"res"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"MOV(INDD(CONST_TABLE, \""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                             "
0 0 19 3 9 #"\"), IMM(\""
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 8 #"set-box!"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"res"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 14 3 4 #"repr"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 32 #"make-const-table-symbol-str-list"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 7 #"symbols"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"T_SYMBOL\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 5 #")))) "
0 0 14 3 5 #"table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 11 #"num-symbols"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbols"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 16 #"symbol-list-size"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 11 #"num-symbols"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 19 3 11 #"\"PUSH(IMM(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 16 #"symbol-list-size"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 19 3 15 #"\"CALL(MALLOC);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 19 3 10 #"\"DROP(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 19 3 35 #"\"MOV(SYMBOL_STRING_LIST, IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 7 #"counter"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 9 #"fold-left"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"text"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"res"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 14 3 4 #"text"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 19 3 31 #"\"MOV(INDD(SYMBOL_STRING_LIST, \""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 3 #")) "
0 0 19 3 5 #"\"), \""
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 3 #")) "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 19 3 31 #"\"MOV(INDD(SYMBOL_STRING_LIST, \""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 19 3 5 #"\"), \""
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 16 #"symbol-list-size"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                    "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 8 #"set-box!"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                              "
0 0 14 3 3 #"res"
0 0 24 3 3 #")) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 14 3 7 #"symbols"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"make-global-table"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 12 #"global-table"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"make-eq?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 10 #"make-zero?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"make-not"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"make-car"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"make-cdr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 9 #"make-cons"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 9 #"make-cadr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 10 #"make-minus"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 9 #"make-plus"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 1 #"9"
0 0 24 3 1 #" "
0 0 14 3 8 #"integer?"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 13 #"make-integer?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 13 #"make-boolean?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"11"
0 0 24 3 1 #" "
0 0 14 3 5 #"char?"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 10 #"make-char?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"12"
0 0 24 3 1 #" "
0 0 14 3 10 #"procedure?"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 15 #"make-procedure?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"13"
0 0 24 3 1 #" "
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 10 #"make-pair?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"14"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 12 #"make-symbol?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 12 #"make-string?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"16"
0 0 24 3 1 #" "
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 10 #"make-list?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"17"
0 0 24 3 1 #" "
0 0 14 3 7 #"vector?"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 12 #"make-vector?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"18"
0 0 24 3 1 #" "
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 10 #"make-null?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"19"
0 0 24 3 1 #" "
0 0 14 3 13 #"integer->char"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 18 #"make-integer->char"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 14 3 13 #"char->integer"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 18 #"make-char->integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"21"
0 0 24 3 1 #" "
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"make-box"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"22"
0 0 24 3 1 #" "
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 10 #"make-unbox"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"23"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 11 #"make-num-eq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"24"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 7 #"make-gt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"25"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 7 #"make-lt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"26"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"make-map"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"27"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 10 #"make-clist"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"28"
0 0 24 3 1 #" "
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 11 #"make-length"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"29"
0 0 24 3 1 #" "
0 0 14 3 7 #"reverse"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 12 #"make-reverse"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 10 #"make-apply"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"31"
0 0 24 3 1 #" "
0 0 14 3 13 #"append-binary"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 18 #"make-append-binary"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"32"
0 0 24 3 1 #" "
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 11 #"make-append"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"33"
0 0 24 3 1 #" "
0 0 14 3 11 #"make-string"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 16 #"make-make-string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"34"
0 0 24 3 1 #" "
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 18 #"make-string-length"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"35"
0 0 24 3 1 #" "
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 15 #"make-string-ref"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"36"
0 0 24 3 1 #" "
0 0 14 3 11 #"string-set!"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 16 #"make-string-set!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"37"
0 0 24 3 1 #" "
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 12 #"make-cvector"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"38"
0 0 24 3 1 #" "
0 0 14 3 11 #"make-vector"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 16 #"make-make-vector"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"39"
0 0 24 3 1 #" "
0 0 14 3 13 #"vector-length"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 18 #"make-vector-length"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 15 #"make-vector-ref"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"41"
0 0 24 3 1 #" "
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 16 #"make-vector-set!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"42"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 9 #"make-mult"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"43"
0 0 24 3 1 #" "
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"make-div"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"44"
0 0 24 3 1 #" "
0 0 14 3 11 #"denominator"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 16 #"make-denominator"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"45"
0 0 24 3 1 #" "
0 0 14 3 9 #"numerator"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 14 #"make-numerator"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"46"
0 0 24 3 1 #" "
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 14 #"make-remainder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"47"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 12 #"make-number?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"48"
0 0 24 3 1 #" "
0 0 14 3 9 #"rational?"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 14 #"make-rational?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"49"
0 0 24 3 1 #" "
0 0 14 3 14 #"symbol->string"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 19 #"make-symbol->string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 19 #"make-string->symbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"51"
0 0 24 3 1 #" "
0 0 14 3 8 #"set-car!"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 13 #"make-set-car!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 21 3 2 #"52"
0 0 24 3 1 #" "
0 0 14 3 8 #"set-cdr!"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 13 #"make-set-cdr!"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 24 #"make-global-table-helper"
0 0 24 3 1 #" "
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"member-global-table"
0 0 24 3 1 #" "
0 0 14 3 18 #"member-const-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"global-table-new-address"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 34 #"make-global-table-mov-instructions"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 7 #"counter"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 9 #"fold-left"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 4 #"repr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 3 #"res"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"repr"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"T_UNDEFINED\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"MOV(INDD(GLOBAL_TABLE, \""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 19 3 9 #"\"), IMM(\""
0 0 24 3 1 #" "
0 0 14 3 4 #"repr"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 4 #"repr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 19 3 25 #"\"MOV(INDD(GLOBAL_TABLE, \""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 19 3 14 #"\"), IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 8 #"set-box!"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"res"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"make-global-table-helper"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 4 #")) ("
0 0 14 3 24 #"make-global-table-helper"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 2 #") "
0 0 14 3 12 #"global-table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 24 #"make-global-table-helper"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 2 #") "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 24 #"make-global-table-helper"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 2 #") "
0 0 14 3 12 #"global-table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"fvar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 20 #"global-table-unboxed"
0 0 24 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 8 #"set-box!"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 2 #" ("
0 0 14 3 24 #"make-global-table-single"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 2 #") "
0 0 14 3 20 #"global-table-unboxed"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 24 #"make-global-table-helper"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 16 #"parsed-expr-list"
0 0 24 3 2 #") "
0 0 14 3 12 #"global-table"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"make-global-table-single"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 19 #"member-global-table"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 12 #"global-table"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 24 #"global-table-new-address"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"T_UNDEFINED\""
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"func-prologue"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 19 3 11 #"\"PUSH(FP);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 19 3 14 #"\"MOV(FP, SP);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"func-epilogue"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 10 #"\"POP(FP);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 9 #"\"RETURN;\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"range"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"m"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"range"
0 0 24 3 3 #" (("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 1 #"m"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"code-gen-error"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"label-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"txt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 7 #"txt-lst"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"MAYER-EXCEPTION: \""
0 0 24 3 1 #" "
0 0 14 3 3 #"txt"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 10 #"label-name"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"PUSH(IMM('\""
0 0 24 3 2 #" ("
0 0 14 3 6 #"string"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"')); \""
0 0 24 3 3 #")) "
0 0 14 3 7 #"txt-lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 11 #"\"PUSH(IMM(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 7 #"txt-lst"
0 0 24 3 3 #")) "
0 0 19 3 5 #"\"));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 24 #"\"CALL(MAKE_SOB_STRING);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 7 #"\"DROP(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 7 #"txt-lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 16 #"\"PUSH(IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 16 #"\"CALL(WRITELN);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 9 #"\"DROP(1)\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 13 #"\"JUMP(EXIT);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"             ))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"code-gen-make-closure"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 8 #"env-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 24 #"\"// Create closure for \""
0 0 24 3 1 #" "
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 13 #"\"PUSH(LABEL(\""
0 0 24 3 1 #" "
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"PUSH(IMM(\""
0 0 24 3 1 #" "
0 0 14 3 8 #"env-name"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 25 #"\"CALL(MAKE_SOB_CLOSURE);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"DROP(2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"            )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 28 #"code-gen-check-lambda-params"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 10 #"num-params"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 20 #"\"CMP(FPARG(1), IMM(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 10 #"num-params"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 35 #"\"JUMP_NE(L_err_lambda_args_count);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"           )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 26 #"make-primitive-from-scheme"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 8 #"env-name"
0 0 24 3 1 #" "
0 0 14 3 11 #"scheme-code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 11 #"parsed-code"
0 0 24 3 2 #" ("
0 0 14 3 10 #"full-parse"
0 0 24 3 1 #" "
0 0 14 3 11 #"scheme-code"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 10 #"lambda-def"
0 0 24 3 2 #" ("
0 0 14 3 14 #"lambda-get-def"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-code"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 9 #"body-code"
0 0 24 3 2 #" ("
0 0 14 3 15 #"lambda-get-body"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-code"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"params"
0 0 24 3 2 #" ("
0 0 14 3 24 #"lambda-get-listed-params"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-code"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 10 #"num-params"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-code"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 13 #"lambda-simple"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 18 #"create-lambda-body"
0 0 24 3 1 #" "
0 0 14 3 10 #"lambda-def"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 14 3 9 #"body-code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 8 #"env-name"
0 0 24 3 1 #" "
0 0 14 3 10 #"num-params"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 8 #"env-name"
0 0 24 3 1 #" "
0 0 14 3 10 #"num-params"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 18 #"make-closure-label"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-gen"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"L_make_closure\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 19 3 7 #"\"JUMP(\""
0 0 24 3 1 #" "
0 0 14 3 18 #"make-closure-label"
0 0 24 3 1 #" "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 13 #"func-prologue"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 10 #"num-params"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 28 #"code-gen-check-lambda-params"
0 0 24 3 1 #" "
0 0 14 3 10 #"num-params"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 4 #"code"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 13 #"func-epilogue"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 18 #"make-closure-label"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 21 #"code-gen-make-closure"
0 0 24 3 1 #" "
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 8 #"env-name"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"make-eq?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 20 #"\"MOV(R1, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 20 #"\"MOV(R2, FPARG(3));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 26 #"\"MOV(R0, IMM(SOB_FALSE));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 25 #"\"CMP(IND(R1), T_SYMBOL);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 25 #"\"JUMP_NE(EQ_NOT_SYMBOL);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 25 #"\"CMP(IND(R2), T_SYMBOL);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 21 #"\"JUMP_NE(L_eq_exit);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 23 #"\"MOV(R1, INDD(R1, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 23 #"\"MOV(R2, INDD(R2, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 23 #"\"JUMP(EQ_NOT_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 16 #"\"EQ_NOT_SYMBOL:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 26 #"\"CMP(IND(R1), T_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 26 #"\"JUMP_NE(EQ_NOT_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 26 #"\"CMP(IND(R2), T_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 21 #"\"JUMP_NE(L_eq_exit);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 32 #"\"CMP(INDD(R1, 1), INDD(R2, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 21 #"\"JUMP_NE(L_eq_exit);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 32 #"\"CMP(INDD(R1, 2), INDD(R2, 2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 21 #"\"JUMP_NE(L_eq_exit);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 18 #"\"JUMP(L_eq_true);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 17 #"\"EQ_NOT_INTEGER:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 24 #"\"CMP(IMM(R1), IMM(R2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 21 #"\"JUMP_NE(L_eq_exit);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 12 #"\"L_eq_true:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 25 #"\"MOV(R0, IMM(SOB_TRUE));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 12 #"\"L_eq_exit:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"L_eq\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"E_EQ\""
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"make-car"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 20 #"\"MOV(R1, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 27 #"\"CMP(INDD(R1, 0), T_PAIR);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 31 #"\"JUMP_NE(L_err_invalid_param);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 23 #"\"MOV(R0, INDD(R1, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"L_car\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"E_CAR\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"make-cdr"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 20 #"\"MOV(R1, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 27 #"\"CMP(INDD(R1, 0), T_PAIR);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 31 #"\"JUMP_NE(L_err_invalid_param);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 23 #"\"MOV(R0, INDD(R1, 2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"L_cdr\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"E_CDR\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"make-cons"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 17 #"\"PUSH(FPARG(3));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 17 #"\"PUSH(FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 22 #"\"CALL(MAKE_SOB_PAIR);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 10 #"\"DROP(2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"L_cons\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"E_CONS\""
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"make-zero?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 26 #"make-primitive-from-scheme"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"L_zero\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"E_ZERO\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"integer?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"))) "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"make-null?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 26 #"make-primitive-from-scheme"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"L_pnull\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"E_PNULL\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())) "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"make-list?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             ))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 26 #"make-primitive-from-scheme"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"L_plist\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"E_PLIST\""
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"make-map"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 26 #"make-primitive-from-scheme"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"L_map\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"E_MAP\""
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"make-clist"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 26 #"make-primitive-from-scheme"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"L_list\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"E_LIST\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"make-not"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 26 #"make-primitive-from-scheme"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"L_not\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"E_NOT\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")) "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"make-plus"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 37 #"\"MOV(R3, FPARG(1)); // Num of params\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"MOV(R0, IMM(0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"MOV(R1, IMM(1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"MOV(R2, IMM(FP));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"SUB(R2, IMM(5));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 12 #"\"PLUS_LOOP:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"CMP(R3, IMM(0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 21 #"\"JUMP_LE(PLUS_EXIT);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 21 #"\"MOV(R4, STACK(R2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R4));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 12 #"\"CALL(SUM);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"DROP(3);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"DECR(R2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"DECR(R3);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"JUMP(PLUS_LOOP);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 12 #"\"PLUS_EXIT:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 25 #"\"CALL(MAKE_SOB_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"DROP(2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"L_PLUS\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"E_PLUS\""
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"make-int-to-bool"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"MOV(R1, FPARG(0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 25 #"\"MOV(R0, IMM(SOB_TRUE));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"CMP(R1, IMM(1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 28 #"\"JUMP_EQ(INT_TO_BOOL_EXIT);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 26 #"\"MOV(R0, IMM(SOB_FALSE));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"INT_TO_BOOL_EXIT:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"L_int_to_bool\""
0 0 24 3 1 #" "
0 0 19 3 15 #"\"E_INT_TO_BOOL\""
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"make-minus"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 37 #"\"MOV(R3, FPARG(1)); // Num of params\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 13 #"\"CMP(R3, 0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 35 #"\"JUMP_EQ(L_err_lambda_args_count);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 13 #"\"CMP(R3, 1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 26 #"\"JUMP_NE(MINUS_CONTINUE);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"MOV(R0, IMM(0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"MOV(R1, IMM(1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 17 #"\"PUSH(FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"CALL(SUBSTRACT);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"DROP(3);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"JUMP(MINUS_EXIT);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 17 #"\"MINUS_CONTINUE:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"MOV(R2, IMM(FP));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"SUB(R2, IMM(5));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 21 #"\"MOV(R4, STACK(R2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 23 #"\"MOV(R0, INDD(R4, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 23 #"\"MOV(R1, INDD(R4, 2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"DECR(R3);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"DECR(R2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 13 #"\"MINUS_LOOP:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"CMP(R3, IMM(0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 22 #"\"JUMP_LE(MINUS_EXIT);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 21 #"\"MOV(R4, STACK(R2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R4));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"CALL(SUBSTRACT);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"DROP(3);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"DECR(R2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"DECR(R3);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"JUMP(MINUS_LOOP);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 13 #"\"MINUS_EXIT:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 25 #"\"CALL(MAKE_SOB_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"DROP(2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"L_MINUS\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"E_MINUS\""
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"make-mult"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 37 #"\"MOV(R3, FPARG(1)); // Num of params\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"MOV(R0, IMM(1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"MOV(R1, IMM(1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"MOV(R2, IMM(FP));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"SUB(R2, IMM(5));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 12 #"\"MULT_LOOP:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"CMP(R3, IMM(0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 21 #"\"JUMP_LE(MULT_EXIT);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 21 #"\"MOV(R4, STACK(R2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R4));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 13 #"\"CALL(MULT);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"DROP(3);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"DECR(R2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"DECR(R3);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"JUMP(MULT_LOOP);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 12 #"\"MULT_EXIT:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 25 #"\"CALL(MAKE_SOB_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"DROP(2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"L_MULT\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"E_MULT\""
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"make-div"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 37 #"\"MOV(R3, FPARG(1)); // Num of params\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"CMP(R3, IMM(0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 35 #"\"JUMP_EQ(L_err_lambda_args_count);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"CMP(R3, IMM(1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 24 #"\"JUMP_NE(DIV_CONTINUE);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 37 #"\"// Switch denominator and numerator\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"MOV(R0, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"PUSH(INDD(R0, 2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"PUSH(INDD(R0, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 15 #"\"CALL(REDUCT);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"DROP(2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 17 #"\"JUMP(DIV_EXIT);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 15 #"\"DIV_CONTINUE:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"MOV(R0, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 23 #"\"MOV(R1, INDD(R0, 2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 23 #"\"MOV(R0, INDD(R0, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"MOV(R2, IMM(FP));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"SUB(R2, IMM(6));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"DECR(R3);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"DIV_LOOP:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 21 #"\"MOV(R4, STACK(R2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R4));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 13 #"\"CALL(DIVI);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"DROP(3);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"DECR(R2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"DECR(R3);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"CMP(R3, IMM(0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"JUMP_LE(DIV_EXIT);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 17 #"\"JUMP(DIV_LOOP);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"DIV_EXIT:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 25 #"\"CALL(MAKE_SOB_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"DROP(2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"L_DIV\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"E_DIV\""
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; = primitive"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"make-num-eq"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 37 #"\"MOV(R1, FPARG(1)); // Num of params\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 13 #"\"CMP(R1, 0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 35 #"\"JUMP_EQ(L_err_lambda_args_count);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"MOV(R2, IMM(FP));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"SUB(R2, IMM(5));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 21 #"\"MOV(R3, STACK(R2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 25 #"\"MOV(R0, IMM(SOB_TRUE));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 14 #"\"NUM_EQ_LOOP:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"CMP(R1, IMM(0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 23 #"\"JUMP_LE(NUM_EQ_EXIT);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 21 #"\"MOV(R4, STACK(R2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 29 #"\"CMP(INDD(R4,0), T_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 31 #"\"JUMP_NE(L_err_invalid_param);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 31 #"\"CMP(INDD(R4,1), INDD(R3, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 25 #"\"JUMP_NE(NUM_EQ_NOT_EQ);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 31 #"\"CMP(INDD(R4,2), INDD(R3, 2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 25 #"\"JUMP_NE(NUM_EQ_NOT_EQ);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"DECR(R2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"DECR(R1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"JUMP(NUM_EQ_LOOP);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"NUM_EQ_NOT_EQ:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 26 #"\"MOV(R0, IMM(SOB_FALSE));\""
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"JUMP(NUM_EQ_EXIT);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 14 #"\"NUM_EQ_EXIT:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"L_NUM_EQ\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"E_NUM_EQ\""
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"make-lt"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 37 #"\"MOV(R5, FPARG(1)); // Num of params\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 13 #"\"CMP(R5, 0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 35 #"\"JUMP_EQ(L_err_lambda_args_count);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"MOV(R2, IMM(FP));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"SUB(R2, IMM(5));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 21 #"\"MOV(R3, STACK(R2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"DECR(R2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"LT_LOOP:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"CMP(R5, IMM(1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"JUMP_LE(LT_TRUE);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 21 #"\"MOV(R4, STACK(R2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 29 #"\"CMP(INDD(R4,0), T_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 31 #"\"JUMP_NE(L_err_invalid_param);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R4));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"PUSH(INDD(R3, 2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"PUSH(INDD(R3, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"CALL(SUBSTRACT);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"DROP(3);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 13 #"\"CMP(R0, 0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"JUMP_GE(LT_FALSE);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 21 #"\"MOV(R3, STACK(R2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"DECR(R2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"DECR(R5);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"JUMP(LT_LOOP);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"LT_TRUE:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 25 #"\"MOV(R0, IMM(SOB_TRUE));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"JUMP(LT_EXIT);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"LT_FALSE:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 26 #"\"MOV(R0, IMM(SOB_FALSE));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"LT_EXIT:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"L_LT\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"E_LT\""
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"make-gt"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 37 #"\"MOV(R5, FPARG(1)); // Num of params\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 13 #"\"CMP(R5, 0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 35 #"\"JUMP_EQ(L_err_lambda_args_count);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"MOV(R2, IMM(FP));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"SUB(R2, IMM(5));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 21 #"\"MOV(R3, STACK(R2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"DECR(R2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"GT_LOOP:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"CMP(R5, IMM(1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"JUMP_LE(GT_TRUE);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 21 #"\"MOV(R4, STACK(R2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 29 #"\"CMP(INDD(R4,0), T_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 31 #"\"JUMP_NE(L_err_invalid_param);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R4));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"PUSH(INDD(R3, 2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"PUSH(INDD(R3, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"CALL(SUBSTRACT);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"DROP(3);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 13 #"\"CMP(R0, 0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"JUMP_LE(GT_FALSE);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 21 #"\"MOV(R3, STACK(R2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"DECR(R2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"DECR(R5);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"JUMP(GT_LOOP);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"GT_TRUE:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 25 #"\"MOV(R0, IMM(SOB_TRUE));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"JUMP(GT_EXIT);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"GT_FALSE:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 26 #"\"MOV(R0, IMM(SOB_FALSE));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"GT_EXIT:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"L_GT\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"E_GT\""
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"make-denominator"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"MOV(R0, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 26 #"\"CMP(IND(R0), T_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 31 #"\"JUMP_NE(L_err_invalid_param);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"PUSH(INDD(R0, 2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 15 #"\"PUSH(IMM(1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 25 #"\"CALL(MAKE_SOB_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"DROP(2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"L_DENOMINATOR\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"E_PRIVATE\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"make-remainder"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"MOV(R0, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"MOV(R1, FPARG(3));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 26 #"\"CMP(IND(R0), T_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 31 #"\"JUMP_NE(L_err_invalid_param);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 26 #"\"CMP(IND(R1), T_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 31 #"\"JUMP_NE(L_err_invalid_param);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 23 #"\"MOV(R2, INDD(R0, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 23 #"\"REM(R2, INDD(R1, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"PUSH(R2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"PUSH(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 25 #"\"CALL(MAKE_SOB_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"DROP(2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"L_REMAINDER\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"E_PRIVATE\""
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"make-numerator"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"MOV(R0, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 26 #"\"CMP(IND(R0), T_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 31 #"\"JUMP_NE(L_err_invalid_param);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"PUSH(INDD(R0, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 15 #"\"PUSH(IMM(1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 25 #"\"CALL(MAKE_SOB_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"DROP(2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"L_NUMERATOR\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"E_PRIVATE\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"make-cadr"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 26 #"make-primitive-from-scheme"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"L_CADR\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"E_CADR\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #"))) "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"make-append-binary"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 1 #"m"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 13 #"append-binary"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 1 #"m"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 26 #"make-primitive-from-scheme"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"L_APPEND_BINARY\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"E_PRIVATE\""
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"make-append"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    (("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    (("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 13 #"append-binary"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 13 #"append-binary"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 26 #"make-primitive-from-scheme"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"L_APPEND\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"E_APPEND\""
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"make-length"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 2 #"ls"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 7 #"counter"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 26 #"make-primitive-from-scheme"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"L_LENGTH\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"E_LENGTH\""
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"make-make-string"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 20 #"\"MOV(R0, FPARG(1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 13 #"\"CMP(R0, 3);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 35 #"\"JUMP_GE(L_err_lambda_args_count);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 24 #"\"// Save the char in R1\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 13 #"\"CMP(R0, 2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 39 #"\"JUMP_EQ(L_make_string_char_received);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 18 #"\"MOV(R1, IMM(0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 31 #"\"JUMP(L_make_string_continue);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 30 #"\"L_make_string_char_received:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 20 #"\"MOV(R0, FPARG(3));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 23 #"\"MOV(R1, INDD(R0, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 25 #"\"L_make_string_continue:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 20 #"\"MOV(R2, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 23 #"\"MOV(R2, INDD(R2, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 14 #"\"MOV(R6, R2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 21 #"\"L_make_string_loop:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 13 #"\"CMP(R2, 0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 35 #"\"JUMP_LE(L_make_string_loop_exit);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 16 #"\"PUSH(IMM(R1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 11 #"\"DECR(R2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 27 #"\"JUMP(L_make_string_loop);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 26 #"\"L_make_string_loop_exit:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 16 #"\"PUSH(IMM(R6));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 24 #"\"CALL(MAKE_SOB_STRING);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 16 #"\"DROP(IMM(R6));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 10 #"\"DROP(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"L_MAKE_STRING\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"E_PRIVATE\""
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"make-string-length"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 20 #"\"MOV(R0, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 20 #"\"PUSH(INDD(R0, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 10 #"\"PUSH(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 25 #"\"CALL(MAKE_SOB_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 10 #"\"DROP(2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"L_STRING_LENGTH\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"E_PRIVATE\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"make-string-ref"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 20 #"\"MOV(R0, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 29 #"\"CMP(INDD(R0, 0), T_STRING);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 31 #"\"JUMP_NE(L_err_invalid_param);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 20 #"\"MOV(R1, FPARG(3));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 30 #"\"CMP(INDD(R1, 0), T_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 31 #"\"JUMP_NE(L_err_invalid_param);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 13 #"\"ADD(R0, 2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 23 #"\"ADD(R0, INDD(R1, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 16 #"\"PUSH(IND(R0));\""
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 22 #"\"CALL(MAKE_SOB_CHAR);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 10 #"\"DROP(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"L_STRING_REF\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"E_PRIVATE\""
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"make-string-set!"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 20 #"\"MOV(R0, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 29 #"\"CMP(INDD(R0, 0), T_STRING);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 31 #"\"JUMP_NE(L_err_invalid_param);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 20 #"\"MOV(R1, FPARG(3));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 30 #"\"CMP(INDD(R1, 0), T_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 31 #"\"JUMP_NE(L_err_invalid_param);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 20 #"\"MOV(R2, FPARG(4));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 27 #"\"CMP(INDD(R2, 0), T_CHAR);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 31 #"\"JUMP_NE(L_err_invalid_param);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 13 #"\"ADD(R0, 2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 23 #"\"ADD(R0, INDD(R1, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 28 #"\"MOV(IND(R0), INDD(R2, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 25 #"\"MOV(R0, IMM(SOB_VOID));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"L_STRING_SET\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"E_PRIVATE\""
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"make-cvector"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 20 #"\"MOV(R0, FPARG(1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 14 #"\"MOV(R1, FP);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 13 #"\"SUB(R1, 5);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 21 #"\"L_vector_push_loop:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 13 #"\"CMP(R0, 0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 34 #"\"JUMP_LE(L_vector_push_loop_end);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 18 #"\"PUSH(STACK(R1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 11 #"\"DECR(R1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 11 #"\"DECR(R0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 27 #"\"JUMP(L_vector_push_loop);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 25 #"\"L_vector_push_loop_end:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 17 #"\"PUSH(FPARG(1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 24 #"\"CALL(MAKE_SOB_VECTOR);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 10 #"\"DROP(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 17 #"\"DROP(FPARG(1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"           )))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"L_VECTOR\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"E_PRIVATE\""
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"make-make-vector"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 20 #"\"MOV(R0, FPARG(1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 13 #"\"CMP(R0, 3);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 35 #"\"JUMP_GE(L_err_lambda_args_count);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 24 #"\"// Save the char in R1\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 13 #"\"CMP(R0, 2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 38 #"\"JUMP_EQ(L_make_vector_mem_received);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 9 #"\"MOV(R1,\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 18 #"member-const-table"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 4 #"))) "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 31 #"\"JUMP(L_make_vector_continue);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 29 #"\"L_make_vector_mem_received:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 20 #"\"MOV(R1, FPARG(3));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 25 #"\"L_make_vector_continue:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 20 #"\"MOV(R2, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 23 #"\"MOV(R2, INDD(R2, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 14 #"\"MOV(R6, R2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 21 #"\"L_make_vector_loop:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 13 #"\"CMP(R2, 0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 35 #"\"JUMP_LE(L_make_vector_loop_exit);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 16 #"\"PUSH(IMM(R1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 11 #"\"DECR(R2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 27 #"\"JUMP(L_make_vector_loop);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 26 #"\"L_make_vector_loop_exit:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 16 #"\"PUSH(IMM(R6));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 24 #"\"CALL(MAKE_SOB_VECTOR);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 16 #"\"DROP(IMM(R6));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 10 #"\"DROP(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"L_MAKE_VECTOR\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"E_PRIVATE\""
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"make-vector-length"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 20 #"\"MOV(R0, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 20 #"\"PUSH(INDD(R0, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 10 #"\"PUSH(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 25 #"\"CALL(MAKE_SOB_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 10 #"\"DROP(2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"L_VECTOR_LENGTH\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"E_PRIVATE\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"make-vector-ref"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 20 #"\"MOV(R0, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 29 #"\"CMP(INDD(R0, 0), T_VECTOR);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 31 #"\"JUMP_NE(L_err_invalid_param);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 20 #"\"MOV(R1, FPARG(3));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 30 #"\"CMP(INDD(R1, 0), T_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 31 #"\"JUMP_NE(L_err_invalid_param);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 13 #"\"ADD(R0, 2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 23 #"\"ADD(R0, INDD(R1, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 19 #"\"MOV(R0, IND(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"L_VECTOR_REF\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"E_PRIVATE\""
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"make-vector-set!"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 20 #"\"MOV(R0, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 29 #"\"CMP(INDD(R0, 0), T_VECTOR);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 31 #"\"JUMP_NE(L_err_invalid_param);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 20 #"\"MOV(R1, FPARG(3));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 30 #"\"CMP(INDD(R1, 0), T_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 31 #"\"JUMP_NE(L_err_invalid_param);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 13 #"\"ADD(R0, 2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 23 #"\"ADD(R0, INDD(R1, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 25 #"\"MOV(IND(R0), FPARG(4));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 25 #"\"MOV(R0, IMM(SOB_VOID));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"L_VECTOR_SET\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"E_PRIVATE\""
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"make-box"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 17 #"\"PUSH(FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 21 #"\"CALL(MAKE_SOB_BOX);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 10 #"\"DROP(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"L_BOX\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"E_BOX\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"make-unbox"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 20 #"\"MOV(R0, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 22 #"\"MOV(R0, INDD(R0,1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"L_UNBOX\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"E_UNBOX\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"make-reverse"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"ls"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 3 #"acc"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 7 #"())))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 26 #"make-primitive-from-scheme"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"L_REVERSE\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"E_PRIVATE\""
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"make-apply"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 36 #"\"// Save num of params in the stack\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 8 #"code-gen"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 6 #"applic"
0 0 24 3 2 #" ("
0 0 14 3 4 #"fvar"
0 0 24 3 1 #" "
0 0 14 3 6 #"length"
0 0 24 3 4 #") (("
0 0 14 3 4 #"pvar"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))) "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 36 #"\"// Calculate the reversed var list\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 8 #"code-gen"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 6 #"applic"
0 0 24 3 2 #" ("
0 0 14 3 4 #"fvar"
0 0 24 3 1 #" "
0 0 14 3 7 #"reverse"
0 0 24 3 4 #") (("
0 0 14 3 4 #"pvar"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))) "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 56
#"\"// Push the vars from the var list (in reversed order)\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"POP(R1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 23 #"\"APPLY_PUSH_VARS_LOOP:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"CMP(R0, SOB_NIL);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 36 #"\"JUMP_EQ(APPLY_PUSH_VARS_LOOP_END);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"PUSH(INDD(R0, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 23 #"\"MOV(R0, INDD(R0, 2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 29 #"\"JUMP(APPLY_PUSH_VARS_LOOP);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 27 #"\"APPLY_PUSH_VARS_LOOP_END:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 27 #"\"// Push the num of params\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"PUSH(INDD(R1, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 27 #"\"// Push the closure's env\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"MOV(R0, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"PUSH(INDD(R0, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 21 #"\"CALLA(INDD(R0, 2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 17 #"\"DROP(1); // env\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 25 #"\"POP(R1); // num of args\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"DROP(IMM(R1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"            )))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"L_apply\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"E_APPLY\""
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"make-set-car!"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 20 #"\"MOV(R0, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 23 #"\"CMP(IND(R0), T_PAIR);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 31 #"\"JUMP_NE(L_err_invalid_param);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 29 #"\"MOV(INDD(R0, 1), FPARG(3));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 25 #"\"MOV(R0, IMM(SOB_VOID));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"L_SET_CAR\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"E_PRIVATE\""
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"make-set-cdr!"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 20 #"\"MOV(R0, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 23 #"\"CMP(IND(R0), T_PAIR);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 31 #"\"JUMP_NE(L_err_invalid_param);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 29 #"\"MOV(INDD(R0, 2), FPARG(3));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 25 #"\"MOV(R0, IMM(SOB_VOID));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"L_SET_CDR\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"E_PRIVATE\""
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"make-char->integer"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 20 #"\"MOV(R1, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 11 #"\"PUSH(R1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 20 #"\"CALL(IS_SOB_CHAR);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 10 #"\"DROP(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 12 #"\"CMP(R0,0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 31 #"\"JUMP_EQ(L_err_invalid_param);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 23 #"\"MOV(R0, INDD(R1, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 16 #"\"PUSH(IMM(R0));\""
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 10 #"\"PUSH(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 25 #"\"CALL(MAKE_SOB_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 10 #"\"DROP(2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"L_char_to_integer\""
0 0 24 3 1 #" "
0 0 19 3 19 #"\"E_CHAR_TO_INTEGER\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"make-integer->char"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 20 #"\"MOV(R1, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 11 #"\"PUSH(R1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 23 #"\"CALL(IS_SOB_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 10 #"\"DROP(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 12 #"\"CMP(R0,0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 31 #"\"JUMP_EQ(L_err_invalid_param);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 23 #"\"MOV(R0, INDD(R1, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 16 #"\"PUSH(IMM(R0));\""
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 22 #"\"CALL(MAKE_SOB_CHAR);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 10 #"\"DROP(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"L_integer_to_char\""
0 0 24 3 1 #" "
0 0 19 3 19 #"\"E_INTEGER_TO_CHAR\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"make-symbol->string"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 20 #"\"MOV(R1, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 25 #"\"CMP(IND(R1), T_SYMBOL);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 31 #"\"JUMP_NE(L_err_invalid_param);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 23 #"\"MOV(R1, INDD(R1, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 20 #"\"PUSH(INDD(R1, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 15 #"\"CALL(MALLOC);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 10 #"\"DROP(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 32 #"\"MOV(INDD(R0, 0), INDD(R1, 0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 32 #"\"MOV(INDD(R0, 1), INDD(R1, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 19 #"\"MOV(R2, IMM(R1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 18 #"\"ADD(R2, IMM(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 19 #"\"MOV(R3, IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 18 #"\"ADD(R0, IMM(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 16 #"\"PUSH(IMM(R2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 16 #"\"PUSH(IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 15 #"\"CALL(STRCPY);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 10 #"\"DROP(2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 19 #"\"MOV(R0, IMM(R3));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"L_symbol_to_string\""
0 0 24 3 1 #" "
0 0 19 3 20 #"\"E_SYMBOL_TO_STRING\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"make-string->symbol"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"MOV(R1, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 25 #"\"CMP(IND(R1), T_STRING);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 31 #"\"JUMP_NE(L_err_invalid_param);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 52 #"\"// Search for the string in the symbol string list\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 35 #"\"MOV(R2, IMM(SYMBOL_STRING_LIST));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 21 #"\"L_FIND_STRING_LOOP:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"PUSH(INDD(R2, 0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"PUSH(R1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 27 #"\"CALL(COMPARE_SOB_STRING);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"DROP(2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 13 #"\"CMP(R0, 1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 26 #"\"JUMP_EQ(L_STRING_FOUND);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 22 #"\"CMP(INDD(R2, 1), 0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 30 #"\"JUMP_EQ(L_STRING_NOT_FOUND);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 6 #"\"MOV(s"
0 0 19 3 16 #", INDD(R2, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 1 #"\""
0 0 19 3 4 #"JUMP"
0 0 19 3 1 #"("
0 0 19 3 18 #"L_FIND_STRING_LOOP"
0 0 19 3 3 #");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 21 #"\"L_STRING_NOT_FOUND:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 15 #"\"PUSH(IMM(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 15 #"\"CALL(MALLOC);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"DROP(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 28 #"\"MOV(INDD(R2, 1), IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 28 #"\"MOV(INDD(R0, 0), IMM(R1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 27 #"\"MOV(INDD(R0, 1), IMM(0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 32 #"\"JUMP(L_STRING_TO_SYMBOL_CONT);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 17 #"\"L_STRING_FOUND:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 23 #"\"MOV(R1, INDD(R2, 0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 26 #"\"L_STRING_TO_SYMBOL_CONT:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"// Create symbol\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 15 #"\"PUSH(IMM(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 15 #"\"CALL(MALLOC);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"DROP(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 29 #"\"MOV(INDD(R0, 0), T_SYMBOL);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 28 #"\"MOV(INDD(R0, 1), IMM(R1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"L_string_to_symbol\""
0 0 24 3 1 #" "
0 0 19 3 20 #"\"E_STRING_TO_SYMBOL\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"make-predicate"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 8 #"env-name"
0 0 24 3 1 #" "
0 0 14 3 9 #"func-name"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 17 #"\"PUSH(FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 7 #"\"CALL(\""
0 0 24 3 1 #" "
0 0 14 3 9 #"func-name"
0 0 24 3 1 #" "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 10 #"\"DROP(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 16 #"\"PUSH(IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 22 #"\"CALL(L_int_to_bool);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 10 #"\"DROP(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 8 #"env-name"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"make-number?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 14 #"make-predicate"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"L_pnumber\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"E_PRIVATE\""
0 0 24 3 1 #" "
0 0 19 3 16 #"\"IS_SOB_INTEGER\""
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"make-integer?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 20 #"\"MOV(R0, FPARG(2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 26 #"\"CMP(IND(R0), T_INTEGER);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 28 #"\"JUMP_NE(L_PINTEGER_FALSE);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 22 #"\"CMP(INDD(R0, 2), 1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 28 #"\"JUMP_NE(L_PINTEGER_FALSE);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 25 #"\"MOV(R0, IMM(SOB_TRUE));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 24 #"\"JUMP(L_PINTEGER_EXIT);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 19 #"\"L_PINTEGER_FALSE:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 26 #"\"MOV(R0, IMM(SOB_FALSE));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 18 #"\"L_PINTEGER_EXIT:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 24 #"make-primitive-from-code"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"L_pinteger\""
0 0 24 3 1 #" "
0 0 19 3 12 #"\"E_PINTEGER\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"make-rational?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 26 #"make-primitive-from-scheme"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"L_prational\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"E_PRIVATE\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"make-boolean?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 14 #"make-predicate"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"L_pboolean\""
0 0 24 3 1 #" "
0 0 19 3 12 #"\"E_PBOOLEAN\""
0 0 24 3 1 #" "
0 0 19 3 13 #"\"IS_SOB_BOOL\""
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"make-char?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 14 #"make-predicate"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"L_pchar\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"E_PCHAR\""
0 0 24 3 1 #" "
0 0 19 3 13 #"\"IS_SOB_CHAR\""
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"make-procedure?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 14 #"make-predicate"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"L_pclosure\""
0 0 24 3 1 #" "
0 0 19 3 12 #"\"E_PCLOSURE\""
0 0 24 3 1 #" "
0 0 19 3 16 #"\"IS_SOB_CLOSURE\""
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"make-pair?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 14 #"make-predicate"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"L_ppair\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"E_PPAIR\""
0 0 24 3 1 #" "
0 0 19 3 13 #"\"IS_SOB_PAIR\""
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"make-symbol?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 14 #"make-predicate"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"L_psymbol\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"E_PSYMBOL\""
0 0 24 3 1 #" "
0 0 19 3 15 #"\"IS_SOB_SYMBOL\""
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"make-vector?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 14 #"make-predicate"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"L_pvector\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"E_PVECTOR\""
0 0 24 3 1 #" "
0 0 19 3 15 #"\"IS_SOB_VECTOR\""
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"make-string?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 14 #"make-predicate"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"L_pstring\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"E_PSTRING\""
0 0 24 3 1 #" "
0 0 19 3 15 #"\"IS_SOB_STRING\""
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"create-prologue"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 16 #"const-table-size"
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 23 #"const-table-new-address"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 17 #"global-table-size"
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 24 #"global-table-new-address"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"#include <stdio.h>\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 21 #"\"#include <stdlib.h>\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"#define DO_SHOW 1\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 26 #"\"#include \\\"arch/cisc.h\\\"\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 34 #"\"#include \\\"arch/debug_macros.h\\\"\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 12 #"\"int main()\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"START_MACHINE;\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 17 #"\"JUMP(CONTINUE);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 28 #"\"#include \\\"arch/char.lib\\\"\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 26 #"\"#include \\\"arch/io.lib\\\"\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 28 #"\"#include \\\"arch/math.lib\\\"\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 30 #"\"#include \\\"arch/string.lib\\\"\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 30 #"\"#include \\\"arch/system.lib\\\"\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 30 #"\"#include \\\"arch/scheme.lib\\\"\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 22 #"\"#define CONST_TABLE \""
0 0 24 3 1 #" "
0 0 14 3 20 #"const-table-register"
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 23 #"\"#define GLOBAL_TABLE \""
0 0 24 3 1 #" "
0 0 14 3 21 #"global-table-register"
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 29 #"\"#define SYMBOL_STRING_LIST \""
0 0 24 3 1 #" "
0 0 14 3 27 #"symbol-string-list-register"
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"#define SOB_NIL \""
0 0 24 3 1 #" "
0 0 14 3 18 #"const-nil-register"
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"#define SOB_VOID \""
0 0 24 3 1 #" "
0 0 14 3 19 #"const-void-register"
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"#define SOB_TRUE \""
0 0 24 3 1 #" "
0 0 14 3 19 #"const-true-register"
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"#define SOB_FALSE \""
0 0 24 3 1 #" "
0 0 14 3 20 #"const-false-register"
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"INIT_CONST_TABLE:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 13 #"func-prologue"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"PUSH(IMM(\""
0 0 24 3 1 #" "
0 0 14 3 16 #"const-table-size"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 15 #"\"CALL(MALLOC);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"DROP(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 23 #"\"MOV(CONST_TABLE, R0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 33 #"make-const-table-mov-instructions"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 32 #"make-const-table-symbol-str-list"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 13 #"func-epilogue"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"INIT_GLOBAL_TABLE:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 13 #"func-prologue"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"PUSH(IMM(\""
0 0 24 3 1 #" "
0 0 14 3 17 #"global-table-size"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 15 #"\"CALL(MALLOC);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"DROP(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 24 #"\"MOV(GLOBAL_TABLE, R0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 34 #"make-global-table-mov-instructions"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 23 #"\"MOV(R0, CONST_TABLE);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"ADD(R0, \""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 18 #"member-const-table"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 11 #"const-table"
0 0 24 3 3 #")) "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 6 #"\"MOV(\""
0 0 24 3 1 #" "
0 0 14 3 18 #"const-nil-register"
0 0 24 3 1 #" "
0 0 19 3 8 #"\", R0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 23 #"\"MOV(R0, CONST_TABLE);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"ADD(R0, \""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 18 #"member-const-table"
0 0 24 3 2 #" ("
0 0 14 3 4 #"void"
0 0 24 3 2 #") "
0 0 14 3 11 #"const-table"
0 0 24 3 3 #")) "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 6 #"\"MOV(\""
0 0 24 3 1 #" "
0 0 14 3 19 #"const-void-register"
0 0 24 3 1 #" "
0 0 19 3 8 #"\", R0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 23 #"\"MOV(R0, CONST_TABLE);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"ADD(R0, \""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 18 #"member-const-table"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 3 #")) "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 6 #"\"MOV(\""
0 0 24 3 1 #" "
0 0 14 3 20 #"const-false-register"
0 0 24 3 1 #" "
0 0 19 3 8 #"\", R0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 23 #"\"MOV(R0, CONST_TABLE);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"ADD(R0, \""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 18 #"member-const-table"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 3 #")) "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 6 #"\"MOV(\""
0 0 24 3 1 #" "
0 0 14 3 19 #"const-true-register"
0 0 24 3 1 #" "
0 0 19 3 8 #"\", R0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 13 #"func-epilogue"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 23 #"\"// Private Primitives\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 16 #"make-int-to-bool"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 14 #"code-gen-error"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"L_err_lambda_args_count\""
0 0 24 3 1 #" "
0 0 19 3 42 #"\"Lambda called with wrong number of args!\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 14 #"code-gen-error"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"L_err_cannot_apply_non_clos\""
0 0 24 3 1 #" "
0 0 19 3 31 #"\"Applic called on non closure!\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 14 #"code-gen-error"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"L_err_define_not_fvar\""
0 0 24 3 1 #" "
0 0 19 3 29 #"\"Defined called on non fvar!\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 14 #"code-gen-error"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"L_err_not_in_code_gen\""
0 0 24 3 1 #" "
0 0 19 3 40 #"\"Code-gen called on unknown expression!\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 14 #"code-gen-error"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"L_err_invalid_param\""
0 0 24 3 1 #" "
0 0 19 3 34 #"\"Function received invalid param!\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 30 #"code-gen-write-sob-if-not-void"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"CONTINUE:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"CREATE_FAKE_ENV:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 15 #"\"PUSH(IMM(0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 22 #"\"PUSH(IMM(SOB_VOID));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 22 #"\"PUSH(IMM(SOB_VOID));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 22 #"\"PUSH(IMM(SOB_VOID));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 25 #"\"CALL(INIT_CONST_TABLE);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 26 #"\"CALL(INIT_GLOBAL_TABLE);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"            ))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"print-r0"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 13 #"\"// Print R0\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 16 #"\"PUSH(IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 30 #"\"CALL(WRITE_SOB_IF_NOT_VOID);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 10 #"\"DROP(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"epilogue"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 7 #"\"EXIT:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 22 #"\"DROP(4); // Fake env\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 15 #"\"STOP_MACHINE;\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 11 #"\"return 0;\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 3 #"\"}\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"label-gen"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"_\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 2 #" ("
0 0 14 3 6 #"gensym"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"code-gen"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 8 #"code-gen"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 57 #"                                                        ("
0 0 14 3 8 #"code-gen"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"const"
0 0 24 3 3 #") ("
0 0 14 3 14 #"code-gen-const"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"if3"
0 0 24 3 3 #") ("
0 0 14 3 11 #"code-gen-if"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"seq"
0 0 24 3 3 #") ("
0 0 14 3 12 #"code-gen-seq"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"or"
0 0 24 3 3 #") ("
0 0 14 3 11 #"code-gen-or"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 10 #"is-lambda?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 4 #")) ("
0 0 14 3 15 #"code-gen-lambda"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 6 #"applic"
0 0 24 3 3 #") ("
0 0 14 3 15 #"code-gen-applic"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 9 #"tc-applic"
0 0 24 3 3 #") ("
0 0 14 3 18 #"code-gen-tc-applic"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"fvar"
0 0 24 3 3 #") ("
0 0 14 3 13 #"code-gen-fvar"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"bvar"
0 0 24 3 3 #") ("
0 0 14 3 13 #"code-gen-bvar"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pvar"
0 0 24 3 3 #") ("
0 0 14 3 13 #"code-gen-pvar"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 15 3 3 #"def"
0 0 24 3 3 #") ("
0 0 14 3 15 #"code-gen-define"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"set"
0 0 24 3 3 #") ("
0 0 14 3 12 #"code-gen-set"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"box"
0 0 24 3 3 #") ("
0 0 14 3 12 #"code-gen-box"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"box-get"
0 0 24 3 3 #") ("
0 0 14 3 16 #"code-gen-box-get"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"box-set"
0 0 24 3 3 #") ("
0 0 14 3 16 #"code-gen-box-set"
0 0 24 3 1 #" "
0 0 14 3 11 #"parsed-expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"JUMP(L_err_not_in_code_gen)\\n\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"code-gen-const"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 8 #"rel-addr"
0 0 24 3 2 #" ("
0 0 14 3 18 #"member-const-table"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 19 3 5 #"\"// \""
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 19 3 23 #"\"MOV(R0, CONST_TABLE);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 19 3 10 #"\"ADD(R0, \""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 8 #"rel-addr"
0 0 24 3 2 #") "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"code-gen-if"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 3 #"dit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 3 #"dif"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"else-label"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-gen"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"L_if3_else\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"exit-label"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-gen"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"L_if3_exit\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 8 #"\"// if3\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"code-gen"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 26 #"\"CMP(R0, IMM(SOB_FALSE));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 10 #"\"JUMP_EQ(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"else-label"
0 0 24 3 1 #" "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"code-gen"
0 0 24 3 1 #" "
0 0 14 3 3 #"dit"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 7 #"\"JUMP(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"exit-label"
0 0 24 3 1 #" "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 10 #"else-label"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"code-gen"
0 0 24 3 1 #" "
0 0 14 3 3 #"dif"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 10 #"exit-label"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"              ))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"code-gen-seq"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"expr-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 8 #"\"// seq\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 8 #"code-gen"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 3 #")) "
0 0 14 3 9 #"expr-list"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"code-gen-or"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"expr-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 10 #"exit-label"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-gen"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"L_or_exit\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 7 #"\"// or\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 8 #"code-gen"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 19 3 26 #"\"CMP(R0, IMM(SOB_FALSE));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 19 3 10 #"\"JUMP_NE(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"exit-label"
0 0 24 3 1 #" "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                   )) "
0 0 14 3 9 #"expr-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 10 #"exit-label"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"             ))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"code-gen-lambda"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 10 #"lambda-def"
0 0 24 3 2 #" ("
0 0 14 3 14 #"lambda-get-def"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 15 #"lambda-get-body"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"params"
0 0 24 3 2 #" ("
0 0 14 3 24 #"lambda-get-listed-params"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 9 #"new-major"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 10 #"body-label"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-gen"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"L_clos_body\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 15 #"copy-env-label1"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-gen"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"L_clos_copy_env_begin\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 15 #"copy-env-label2"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-gen"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"L_clos_copy_env_exit\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 18 #"copy-params-label1"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-gen"
0 0 24 3 1 #" "
0 0 19 3 26 #"\"L_clos_copy_params_begin\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 18 #"copy-params-label2"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-gen"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"L_clos_copy_params_exit\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 22 #"params-not-empty-label"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-gen"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"L_clos_params_not_empty\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 10 #"exit-label"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-gen"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"L_clos_exit\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 11 #"\"// lambda\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 22 #"\"// Allocate env list\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 20 #"\"MOV(R1, FPARG(0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 11 #"\"PUSH(IMM(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-major"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 15 #"\"CALL(MALLOC);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 10 #"\"DROP(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 14 #"\"MOV(R2, R0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 17 #"\"// Copy old env\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 14 #"\"XOR(R3, R3);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 13 #"\"MOV(R4, 1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 15 #"copy-env-label1"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 14 #"\"CMP(R3, IMM(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 10 #"\"JUMP_GE(\""
0 0 24 3 1 #" "
0 0 14 3 15 #"copy-env-label2"
0 0 24 3 1 #" "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 14 #"\"MOV(R5, R2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 14 #"\"ADD(R5, R4);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 14 #"\"MOV(R6, R1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 14 #"\"ADD(R6, R3);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 24 #"\"MOV(IND(R5), IND(R6));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 11 #"\"INCR(R3);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 11 #"\"INCR(R4);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 7 #"\"JUMP(\""
0 0 24 3 1 #" "
0 0 14 3 15 #"copy-env-label1"
0 0 24 3 1 #" "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 15 #"copy-env-label2"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 25 #"\"// Allocate current env\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 52 #"\"MOV(R3, FPARG(1)); // Number of last lambda params\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 16 #"\"PUSH(IMM(R3));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 15 #"\"CALL(MALLOC);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 10 #"\"DROP(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 19 #"\"MOV(IND(R2), R0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 18 #"\"CMP(R3, IMM(0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 10 #"\"JUMP_NE(\""
0 0 24 3 1 #" "
0 0 14 3 22 #"params-not-empty-label"
0 0 24 3 1 #" "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 29 #"\"MOV(IND(R2), IMM(E_EMPTY));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 22 #"params-not-empty-label"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 28 #"\"// Copy last lambda params\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 14 #"\"XOR(R4, R4);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 13 #"\"MOV(R5, 1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 18 #"copy-params-label1"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 19 #"\"CMP(R4, IMM(R3));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 10 #"\"JUMP_GE(\""
0 0 24 3 1 #" "
0 0 14 3 18 #"copy-params-label2"
0 0 24 3 1 #" "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 19 #"\"MOV(R6, IND(R2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 14 #"\"ADD(R6, R4);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 19 #"\"MOV(R7, IMM(FP));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 18 #"\"SUB(R7, IMM(4));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 19 #"\"SUB(R7, IMM(R5));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 26 #"\"MOV(IND(R6), STACK(R7));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 11 #"\"INCR(R4);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 11 #"\"INCR(R5);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 7 #"\"JUMP(\""
0 0 24 3 1 #" "
0 0 14 3 18 #"copy-params-label1"
0 0 24 3 1 #" "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 18 #"copy-params-label2"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 28 #"\"// Allocate closure object\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 15 #"\"PUSH(IMM(3));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 15 #"\"CALL(MALLOC);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 10 #"\"DROP(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 30 #"\"MOV(INDD(R0, 0), T_CLOSURE);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 35 #"\"MOV(INDD(R0, 1), IMM(R2)); // env\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 25 #"\"MOV(INDD(R0, 2), LABEL(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"body-label"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 7 #"\"JUMP(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"exit-label"
0 0 24 3 1 #" "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 10 #"body-label"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 13 #"func-prologue"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 18 #"create-lambda-body"
0 0 24 3 1 #" "
0 0 14 3 10 #"lambda-def"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 13 #"func-epilogue"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 10 #"exit-label"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                ))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"create-lambda-body"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 10 #"lambda-def"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 10 #"lambda-def"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"lambda-simple"
0 0 24 3 3 #") ("
0 0 14 3 25 #"create-lambda-simple-body"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 10 #"lambda-def"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"lambda-var"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 10 #"lambda-def"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"lambda-opt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 22 #"create-lambda-opt-body"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 25 #"create-lambda-simple-body"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 23 #"\"// Lambda-simple body\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 28 #"code-gen-check-lambda-params"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 16 #"\"// Actual body\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"code-gen"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"           )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"create-lambda-opt-body"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 10 #"num-params"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 13 #"var-list-loop"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-gen"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"L_var_list_loop\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 17 #"var-list-loop-end"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-gen"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"L_var_list_loop_end\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 10 #"stack-loop"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-gen"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"L_stack_loop\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 13 #"stack-fix-end"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-gen"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"L_stack_fix_end\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 24 #"fix-stack-empty-var-list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-gen"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"L_fix_stack_empty_var_list\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 20 #"fix-stack-empty-loop"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-gen"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"L_fix_stack_empty_loop\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 19 #"stack-fix-empty-end"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-gen"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"L_stack_fix_empty_end\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 24 #"\"// Lambda-opt/var body\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 44 #"\"// Init R2 with the length of the var list\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"MOV(R2, FPARG(1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 14 #"\"SUB(R2, IMM(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 10 #"num-params"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 45 #"\"// Save the var list length in R6 for later\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"MOV(R6, IMM(R2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 20 #"\"// Create var list\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 47 #"\"MOV(R0, SOB_NIL); // Result of var list in R0\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"MOV(R3, IMM(FP));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"SUB(R3, IMM(4));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 59
#"\"SUB(R3, FPARG(1)); // Save increasing stack pointer in R3\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 13 #"var-list-loop"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 13 #"\"CMP(R2, 0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"JUMP_LE(\""
0 0 24 3 1 #" "
0 0 14 3 17 #"var-list-loop-end"
0 0 24 3 1 #" "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"PUSH(IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"PUSH(STACK(R3));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 22 #"\"CALL(MAKE_SOB_PAIR);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"DROP(2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"INCR(R3);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"DECR(R2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 7 #"\"JUMP(\""
0 0 24 3 1 #" "
0 0 14 3 13 #"var-list-loop"
0 0 24 3 1 #" "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 17 #"var-list-loop-end"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"// Fix the stack\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 13 #"\"CMP(R6, 0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"JUMP_EQ(\""
0 0 24 3 1 #" "
0 0 14 3 24 #"fix-stack-empty-var-list"
0 0 24 3 1 #" "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"MOV(R1, IMM(FP));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"SUB(R1, IMM(3));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 35 #"\"SUB(R1, FPARG(1)); // R1 = bottom\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"MOV(R2, IMM(FP));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 14 #"\"SUB(R2, IMM(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 14 3 10 #"num-params"
0 0 24 3 3 #")) "
0 0 19 3 43 #"\")); // R2 = bottom of non-optional params\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 10 #"stack-loop"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"CMP(R2, IMM(FP));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"JUMP_GE(\""
0 0 24 3 1 #" "
0 0 14 3 13 #"stack-fix-end"
0 0 24 3 1 #" "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 28 #"\"MOV(STACK(R1), STACK(R2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"INCR(R1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"INCR(R2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 7 #"\"JUMP(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"stack-loop"
0 0 24 3 1 #" "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 24 #"fix-stack-empty-var-list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 83
(
 #"\"// Init R3 with the loop limit (position of first optional var in "
 #"original stack)\""
) 0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"MOV(R3, IMM(FP));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 14 #"\"SUB(R3, IMM(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 14 3 10 #"num-params"
0 0 24 3 3 #")) "
0 0 19 3 5 #"\"));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"MOV(R1, IMM(FP));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"INCR(R1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"MOV(R2, IMM(FP));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 20 #"fix-stack-empty-loop"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"CMP(R2, IMM(R3));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 10 #"\"JUMP_LT(\""
0 0 24 3 1 #" "
0 0 14 3 19 #"stack-fix-empty-end"
0 0 24 3 1 #" "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 28 #"\"MOV(STACK(R1), STACK(R2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"DECR(R1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"DECR(R2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 7 #"\"JUMP(\""
0 0 24 3 1 #" "
0 0 14 3 20 #"fix-stack-empty-loop"
0 0 24 3 1 #" "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 19 #"stack-fix-empty-end"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 70
(
 #"\"// Fix R1 to point to the new FP since the code below relies on th"
 #"at\""
) 0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"MOV(R1, IMM(FP));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 11 #"\"INCR(R1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 13 #"stack-fix-end"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"// Fix FP and SP\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"MOV(FP, IMM(R1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 19 #"\"MOV(SP, IMM(FP));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 29 #"\"// Fix the number of params\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 18 #"\"SUB(R1, IMM(4));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 21 #"\"MOV(STACK(R1), IMM(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 10 #"num-params"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 19 3 5 #"\"));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 23 #"\"// Write the var list\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 14 #"\"SUB(R1, IMM(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 10 #"num-params"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 19 3 5 #"\"));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 46 #"\"MOV(STACK(R1), IMM(R0)); // Put the var list\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 16 #"\"// Actual body\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 8 #"code-gen"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 30 #"code-gen-write-sob-if-not-void"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 24 #"\"WRITE_SOB_IF_NOT_VOID:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 13 #"func-prologue"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 31 #"\"CMP(FPARG(0), IMM(SOB_VOID));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 37 #"\"JUMP_EQ(WRITE_SOB_IF_NOT_VOID_END);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 17 #"\"PUSH(FPARG(0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 18 #"\"CALL(WRITE_SOB);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 10 #"\"DROP(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 19 #"\"PUSH(IMM('\\\\n'));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 16 #"\"CALL(PUTCHAR);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 10 #"\"DROP(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 28 #"\"WRITE_SOB_IF_NOT_VOID_END:\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 13 #"func-epilogue"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"code-gen-applic"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 11 #"\"// applic\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"fold-right"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 4 #"code"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 8 #"code-gen"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 19 3 16 #"\"PUSH(IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                     )) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 11 #"\"PUSH(IMM(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")) "
0 0 19 3 22 #"\")); // Num of params\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"code-gen"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 35 #"\"CMP(INDD(R0, 0), IMM(T_CLOSURE));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 39 #"\"JUMP_NE(L_err_cannot_apply_non_clos);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 20 #"\"PUSH(INDD(R0, 1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 21 #"\"CALLA(INDD(R0, 2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 17 #"\"DROP(1); // env\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 25 #"\"POP(R1); // num of args\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 16 #"\"DROP(IMM(R1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"              ))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"code-gen-tc-applic"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 14 #"fix-stack-loop"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-gen"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"L_fix_stack_loop\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 18 #"fix-stack-loop-end"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-gen"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"L_fix_stack_loop_end\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 14 #"\"// tc-applic\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"fold-right"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 4 #"code"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 8 #"code-gen"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 19 3 16 #"\"PUSH(IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                     )) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 11 #"\"PUSH(IMM(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")) "
0 0 19 3 22 #"\")); // Num of params\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"code-gen"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 35 #"\"CMP(INDD(R0, 0), IMM(T_CLOSURE));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 39 #"\"JUMP_NE(L_err_cannot_apply_non_clos);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 27 #"\"PUSH(INDD(R0, 1)); // env\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 25 #"\"PUSH(FPARG(-1)); // ret\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 16 #"\"// Save old_fp\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 14 #"\"MOV(R1, FP);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 11 #"\"DECR(R1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 21 #"\"MOV(R1, STACK(R1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 18 #"\"// Fix the stack\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 19 #"\"MOV(R2, IMM(FP));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 13 #"\"SUB(R2, 4);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 36 #"\"SUB(R2, STACK(R2)); // R2 = bottom\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 19 #"\"MOV(R3, IMM(FP));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 14 #"fix-stack-loop"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 19 #"\"CMP(R3, IMM(SP));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 10 #"\"JUMP_GE(\""
0 0 24 3 1 #" "
0 0 14 3 18 #"fix-stack-loop-end"
0 0 24 3 1 #" "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 28 #"\"MOV(STACK(R2), STACK(R3));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 11 #"\"INCR(R2);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 11 #"\"INCR(R3);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 7 #"\"JUMP(\""
0 0 24 3 1 #" "
0 0 14 3 14 #"fix-stack-loop"
0 0 24 3 1 #" "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 18 #"fix-stack-loop-end"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 19 #"\"MOV(SP, IMM(R2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 14 #"\"MOV(FP, R1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 21 #"\"JUMPA(INDD(R0, 2));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"              ))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"code-gen-fvar"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 8 #"var-name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 8 #"var-addr"
0 0 24 3 2 #" ("
0 0 14 3 19 #"member-global-table"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-name"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 5 #"\"// \""
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 28 #"\"MOV(R0, INDD(GLOBAL_TABLE,\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-addr"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                ))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"code-gen-pvar"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"var-name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"minor"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 19 3 5 #"\"// \""
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 19 3 16 #"\"MOV(R0, FPARG(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 5 #"minor"
0 0 24 3 3 #")) "
0 0 19 3 5 #"\"));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"code-gen-bvar"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"var-name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"major"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"minor"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 19 3 5 #"\"// \""
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 19 3 20 #"\"MOV(R0, FPARG(0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 19 3 19 #"\"MOV(R0, INDD(R0, \""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 19 3 19 #"\"MOV(R0, INDD(R0, \""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 5 #"minor"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"code-gen-define"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 7 #"address"
0 0 24 3 2 #" ("
0 0 14 3 19 #"member-global-table"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 7 #"address"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 19 3 12 #"\"// define \""
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"~s\""
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #") "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 19 3 24 #"\"MOV(R1, GLOBAL_TABLE);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 19 3 10 #"\"ADD(R1, \""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 7 #"address"
0 0 24 3 2 #") "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 19 3 35 #"\"PUSH(R1); // Save pointer to fvar\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 8 #"code-gen"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 19 3 37 #"\"POP(R1); // Restore pointer to fvar\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 19 3 19 #"\"MOV(IND(R1), R0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 19 3 20 #"\"MOV(R0, SOB_VOID);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"JUMP(L_err_define_not_fvar);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"              )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"code-gen-set"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 5 #"\"// \""
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"code-gen"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"pvar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 19 3 14 #"\"MOV(R1, FP);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 19 3 10 #"\"SUB(R1, \""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 4 #"))) "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 19 3 21 #"\"MOV(STACK(R1), R0);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"bvar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"major"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 5 #"minor"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 19 3 20 #"\"MOV(R1, FPARG(0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 19 3 19 #"\"MOV(R1, INDD(R1, \""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 19 3 15 #"\"MOV(INDD(R1, \""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 5 #"minor"
0 0 24 3 2 #") "
0 0 19 3 14 #"\"), IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 19 3 29 #"\"MOV(R1, IMM(GLOBAL_TABLE));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 19 3 10 #"\"ADD(R1, \""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 19 #"member-global-table"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #") "
0 0 14 3 12 #"global-table"
0 0 24 3 3 #")) "
0 0 19 3 4 #"\");\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 19 3 24 #"\"MOV(IND(R1), IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 19 3 25 #"\"MOV(R0, IMM(SOB_VOID));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"code-gen-box"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 5 #"\"// \""
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 8 #"code-gen"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 16 #"\"PUSH(IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 21 #"\"CALL(MAKE_SOB_BOX);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 19 3 10 #"\"DROP(1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"code-gen-box-set"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 19 3 12 #"\"// box-set\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 8 #"code-gen"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 19 3 40 #"\"PUSH(IMM(R0)); // Save the box pointer\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 8 #"code-gen"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 19 3 10 #"\"POP(R1);\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 19 3 28 #"\"MOV(INDD(R1, 1), IMM(R0));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"               ))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"code-gen-box-get"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 5 #"\"// \""
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"code-gen"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 11 #"const-table"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"major"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 22 #"\"MOV(R0, INDD(R0,1));\""
0 0 24 3 1 #" "
0 0 14 3 2 #"nl"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"              ))))"
0           0
