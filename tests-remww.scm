(load "remww.scm")

(define display-green-with-number
    (lambda (counter)
        (display (format 
            (string-append
                "\033[1;32m"
                "===================== All ("
                (number->string counter)
                (if (= counter 1)
                    ") TEST"
                    ") TESTS" )
                    " SUCCEEDED =====================\033[0m \n")))))
                    
(define display-wrong-test
    (lambda(x)
        (display (format "\033[1;31m==================== WRONG TEST ===================="))(display (format "\033[1;39m"))(newline)(newline)
        (display (format "\033[0;31mTest:"))(display (format "\033[1;39m"))(newline)(display (car x))(newline)(newline)
        (display (format "\033[0;31mExpected:"))(display (format "\033[1;39m"))(newline)(display (car (cdr x)))(newline)(newline)
        (display (format "\033[0;31mActual:"))(display (format "\033[1;39m"))(newline)(display (car (cdr (cdr x))))(newline)(newline)))

(define bad-summary
    (lambda()
        (let*
            ((wrong-count
                (length (filter (lambda(x) (not (equal? #t x))) (test-func tests mayer-results))))
             (succsess-count
                (- (length tests) wrong-count)))
            (display (format 
                (string-append
                    "\033[1;32m"
                    "==================== "
                    (number->string succsess-count)
                    " / "
                    (number->string (+ wrong-count succsess-count))
                    (if (= succsess-count 1)
                        " TEST"
                        " TESTS" )
                    " SUCCEEDED ====================\033[0m \n")))
            (newline)
            (display (format 
                (string-append
                    "\033[1;31m"
                    "====================== "
                    (number->string wrong-count)
                                        " / "
                    (number->string (+ wrong-count succsess-count))
                    (if (= wrong-count 1)
                        " TEST"
                        " TESTS" )
                    " FAILED ======================\033[0m \n"))))))

(define test-all
    (lambda ()
        (if (null? (filter (lambda(x) (not (equal? #t x))) (test-func tests mayer-results)))
            ((lambda ()
                (display-green-with-number (length tests))))
            (begin
                (map
                    display-wrong-test
                    (filter (lambda(x) (not (equal? #t x))) (test-func tests mayer-results)))
                (bad-summary)
                (void)))))

(define test-func
    (lambda (lst r)
        (if (null? lst)
            '()
            (cons (if (equal?   (remww (car lst))
                                (car r))
                        #t
                        (list   (car lst)
                                (car r)
                                    (remww (car lst))))
                    (test-func (cdr lst) (cdr r))))))
                    
(define tests
    (list
        ;;test1
        '(  (g46494 (6 1) (6))
            (g46495 (3 6 0) (0 4))
            (g46496 (1) (3))
            (g46497 (5 0 6) (4 2))
            (g46498 (7 1 3) ())
            (g46499 (7) ())
            (g46500 (0 1) ())
            (g46501 (4 7) (7))
            (g46502 (5 7 0) ())
            (g46503 (5 2 0) (6 2))
            (g46504 (6 4 5) (0))
            (g46505 (1 2) (1))
            (g46506 (6 2 7 5) (7))
            (g46507 (1) ())
            (g46508 (1) ())
            (g46509 (0 3 2) (5 0))
            (g46510 (3 6) (4)))

        ;;test2
        '(  (g46494 (6 1) (9))
            (g46495 (3 6 0) (0 4))
            (g46496 (1) (3))
            (g46497 (9) (4 2))
            (g46498 (7 1 3) (9)) 
            (g46499 (7) (9)))

        ;;test3
        '(  (inst1 (1) (1))
            (isnt2 (1) (1))
            (inst3 () (1)))
        
        ;;test4
        '(  (inst1 () (1))
            (inst2 () (1)))

        ;;test5
        '(  (inst1 () (1)))

        ;;test6
        '(  (g46494 (6 1) (6))
            (g46494 (6 1) (6))
            (g46494 (6 1) (6))
            (g46494 (6 1) (6))
            (g46494 (6 1) (6))
            (g46494 (7) (6)))
            
        ;;test7
        '(
            (g46494 (5 1) (6))
            (g46494 (6 1 2) (6))
            (g46494 (1 1) (2))
            (g46494 (1 1) (6))
            (g46494 (6 2) (2)))
            
            
       '((g46494 (6 1) (6))
     (g46495 (3 6 0) (0 4))
     (g46496 (1) (3))
     (g46497 (5 0 6) (4 2))
     (g46498 (7 1 3) ())
     (g46499 (7) ())
     (g46500 (0 1) ())
     (g46501 (4 7) (7))
     (g46502 (5 7 0) ())
     (g46503 (5 2 0) (6 2))
     (g46504 (6 4 5) (0))
     (g46505 (1 2) (1))
     (g46506 (6 2 7 5) (7))
     (g46507 (1) ())
     (g46508 (1) ())
     (g46509 (0 3 2) (5 0))
     (g46510 (3 6) (4)))
     
       '((g47824 (5 0) ())
     (g47825 (4 3 5) (2))
     (g47826 (5) (4 2))
     (g47827 (7) (6))
     (g47828 (7) ())
     (g47829 (0 3 5 1) (3 5))
     (g47830 (0 5 1) (1 4))
     (g47831 (7) (6 3))
     (g47832 (5 7) ())
     (g47833 (6) ())
     (g47834 (7) (4)))
     
     
     '((g62862 (7 6 2) ())
     (g62863 (2 5) ())
     (g62864 (6) (6))
     (g62865 (6 0 7) (1 2))
     (g62866 (0 2) (7 1))
     (g62867 (0 7) ())
     (g62868 (6 2 0) (7))
     (g62869 (5 3 4) ())
     (g62870 (6 3) (6))
     (g62871 (0 2 3) (4 7))
     (g62872 (5) (5 1))
     (g62873 (3 0 4) (3)))
     
      '((g77704 (0 5 2 6) (3))
     (g77705 (0) ())
     (g77706 (4 2 3) ())
     (g77707 (7 6 5 3) (0 3))
     (g77708 (3 4 0 5) ())
     (g77709 (0 5) (2))
     (g77710 (6 4 3) (3))
     (g77711 (0 7 2 3) (2))
     (g77712 (5 4 7 0) (2 4))
     (g77713 (1 0 7) (7 2))
     (g77714 (2 0) (5))
     (g77715 (4 5) ()))
     
      '((g92764 (1 7) ())
     (g92765 (6) ())
     (g92766 (7 0) ())
     (g92767 (5 7) (2 1))
     (g92768 (7) ())
     (g92769 (4) ())
     (g92770 (2 6) (2 0))
     (g92771 (0 4 5) (5))
     (g92772 (5 7 4 2) (0))
     (g92773 (7 0) (7))
     (g92774 (0 3 7 4) ())
     (g92775 (2 7) (3 5))
     (g92776 (7) (3)))
     
        '((g47824 (5 0) ())
     (g47825 (4 3 5) (2))
     (g47826 (5) (4 2))
     (g47827 (7) (6))
     (g47828 (7) ())
     (g47829 (0 3 5 1) (3 5))
     (g47830 (0 5 1) (1 4))
     (g47831 (7) (6 3))
     (g47832 (5 7) ())
     (g47833 (6) ())
     (g47834 (7) (4)))
     
      '((g170109 (2 0) (1 4))
     (g170110 (6 0) (4))
     (g170111 (5) (1))
     (g170112 (0) ())
     (g170113 (0 1) ())
     (g170114 (7 0 5) ())
     (g170115 (6 2) ())
     (g170116 (3 0) ())
     (g170117 (6 1 0 2) (4))
     (g170118 (5 3) ())
     (g170119 (4) ())
     (g170120 (3) (4 0))
     (g170121 (1 7 5 3) (0))
     (g170122 (2) ())
     (g170123 (3 0 4) ())
     (g170124 (4) ())
     (g170125 (7 3) ()))
     
     
        '((g189524 (2 3 1 0) (1))
     (g189525 (4 7 2) ())
     (g189526 (5) (7))
     (g189527 (4 7) ())
     (g189528 (5) (0))
     (g189529 (3 5) ())
     (g189530 (0) (1))
     (g189531 (6) (2))
     (g189532 (1 4 0) (1))
     (g189533 (4 1 6) ())
     (g189534 (6) (4 3))
     (g189535 (5 4 1) (2))
     (g189536 (2 7) ())
     (g189537 (5 6 4) (7))
     (g189538 (0 5) (2 1))
     (g189539 (0 2 3 6) (0))
     (g189540 (4 5 6) (7 0))
     (g189541 (1) ())
     (g189542 (4 0 2) ())
     (g189543 (2) (0 7)))
     
     
      '((g202766 (7 6) (7))
     (g202767 (4) (7))
     (g202768 (0 1 7) ())
     (g202769 (1) (6))
     (g202770 (6 3 5) (3))
     (g202771 (0) (3 7))
     (g202772 (4 6 0) ())
     (g202773 (4 1) ())
     (g202774 (0) (4))
     (g202775 (7 6) ())
     (g202776 (5) ())
     (g202777 (3 7) ())
     (g202778 (4 0 3) ())
     (g202779 (7 1 3) ())
     (g202780 (4) (4))
     (g202781 (7) ())
     (g202782 (6 7 0) (4 0))
     (g202783 (7 3) ())
     (g202784 (2 0 3) ())
     (g202785 (6 2 5 1) (4 1)))
     
     
     '((g213914 (4 7) ())
     (g213915 (7) (0 5))
     (g213916 (5 4 1 6) (4))
     (g213917 (2 5 0) (5))
     (g213918 (7 6 2) (0))
     (g213919 (5) (0))
     (g213920 (0 7) (1))
     (g213921 (2) ())
     (g213922 (4) ())
     (g213923 (4) (5 1))
     (g213924 (3 7 5) (5 4))
     (g213925 (7) (5 4))
     (g213926 (5) ())
     (g213927 (4) (1 0))
     (g213928 (0 1 7 4) (0))
     (g213929 (4) (2))
     (g213930 (1) (3))
     (g213931 (4 7 5) ())
     (g213932 (2) (1))
     (g213933 (0 5 4 2) ()))
     
     
      '((g237226 (7 3) (3))
     (g237227 (6 2 4) (4 3))
     (g237228 (7) ())
     (g237229 (6 3) (1 7))
     (g237230 (4) ())
     (g237231 (5) (2))
     (g237232 (6 3) ())
     (g237233 (4 6) (2 0))
     (g237234 (7) ())
     (g237235 (3 5 0) ())
     (g237236 (3) (7))
     (g237237 (0 7 5) ())
     (g237238 (3 4) (7 6))
     (g237239 (3) ())
     (g237240 (6) (4))
     (g237241 (1 7) ())
     (g237242 (4) ())
     (g237243 (4 3 2) ())
     (g237244 (0 2 7) (4 2))
     (g237245 (3 1) ()))
     
     
       '((g248128 (4 5 6) ())
     (g248129 (5) ())
     (g248130 (0 1 4) (3))
     (g248131 (4) ())
     (g248132 (4 7 6 3) ())
     (g248133 (4 5) ())
     (g248134 (7 6) (3))
     (g248135 (3 4 7) (2))
     (g248136 (1 3) ())
     (g248137 (6) ())
     (g248138 (3 2) (6))
     (g248139 (0 2) (5 0))
     (g248140 (3) (7 5))
     (g248141 (3) ())
     (g248142 (5) (1 0))
     (g248143 (3) (2))
     (g248144 (7 5 4) ())
     (g248145 (2 3 5 4) (5 6))
     (g248146 (1) ())
     (g248147 (6 3) ()))
     
     '((g260807 (0 5 4 1) (0 2))
     (g260808 (2 6 0 1) (2 1))
     (g260809 (0) ())
     (g260810 (2) ())
     (g260811 (6 4) (1))
     (g260812 (7 0) ())
     (g260813 (4) (2 4))
     (g260814 (5 6) ())
     (g260815 (7 4) (1))
     (g260816 (2 1 3) (5))
     (g260817 (2) (2))
     (g260818 (3 1 4 5) (0))
     (g260819 (7) (5))
     (g260820 (3) ())
     (g260821 (3 5) ())
     (g260822 (6) (5 0))
     (g260823 (0) ())
     (g260824 (0 6) ())
     (g260825 (2 3) (7))
     (g260826 (6) (7 3)))
     
     '((g283105 (4 7) (1 2))
     (g283106 (3) ())
     (g283107 (2 1 3) ())
     (g283108 (7 1) ())
     (g283109 (4 3) (2))
     (g283110 (6 4 7) (5))
     (g283111 (7 4 6) ())
     (g283112 (1) ())
     (g283113 (3 0 6 4) ())
     (g283114 (3 7 2 4) (5))
     (g283115 (6 7 2 4) (1))
     (g283116 (4 5) (1))
     (g283117 (1 4 3) ())
     (g283118 (2 3 1) (6))
     (g283119 (3) ())
     (g283120 (1) ())
     (g283121 (0 6) ())
     (g283122 (7 6) ())
     (g283123 (6) (7 2))
     (g283124 (3) ()))
     
      '((g296816 (0 1) (4 0))
     (g296817 (0 2 4) (7))
     (g296818 (2 7) ())
     (g296819 (2) (3))
     (g296820 (1 0 6) (4 3))
     (g296821 (5 3 4 2) ())
     (g296822 (0 7) (4))
     (g296823 (6) ())
     (g296824 (0 2) ())
     (g296825 (4 2) (0))
     (g296826 (2 1) (0))
     (g296827 (2) (7))
     (g296828 (3 1 7) ())
     (g296829 (6 7) (3 5))
     (g296830 (0 5) ())
     (g296831 (3) ())
     (g296832 (2 0 4) ())
     (g296833 (5 0) (4)))
     
     '((g303226 (6) (0 4))
     (g303227 (7) (3))
     (g303228 (5 6 7 0) (7 0))
     (g303229 (5) (1))
     (g303230 (1 5 4 7) ())
     (g303231 (2 7 0) (6 0))
     (g303232 (2 7 4) (2))
     (g303233 (3 2) (2))
     (g303234 (2) ())
     (g303235 (4 5 1) ())
     (g303236 (5) (6))
     (g303237 (5) (2 3))
     (g303238 (4 5) (3 0))
     (g303239 (6 2 4) ())
     (g303240 (7 3 2) ())
     (g303241 (7 1 3) (6 1))
     (g303242 (3 7 5) ())
     (g303243 (1 4) (2))
     (g303244 (3 6 5) ())
     (g303245 (0 2) ()))
     
        '((g319408 (0) ())
     (g319409 (4 2) ())
     (g319410 (6) (7 6))
     (g319411 (5) (3))
     (g319412 (4 3 2) (7))
     (g319413 (0) (7))
     (g319414 (1) ())
     (g319415 (2 5 7) (0))
     (g319416 (3 6) ())
     (g319417 (4 0 7) ())
     (g319418 (7) ())
     (g319419 (2) ())
     (g319420 (1) ())
     (g319421 (5 2) (7 3))
     (g319422 (5 3) ())
     (g319423 (3) (7))
     (g319424 (2 1 6) ())
     (g319425 (7 6) ())
     (g319426 (7 2 3) ())
     (g319427 (0 1) ()))
     
     '((g338671 (1 4) ())
     (g338672 (3 5 2) ())
     (g338673 (7 5) ())
     (g338674 (2 1) ())
     (g338675 (5 3) (7))
     (g338676 (4) ())
     (g338677 (0 7) (6))
     (g338678 (3) (1))
     (g338679 (6) ())
     (g338680 (7 0 6) (2))
     (g338681 (1) ())
     (g338682 (4 1) ())
     (g338683 (1 5 6) (4))
     (g338684 (7) ())
     (g338685 (2 6 0) ())
     (g338686 (5 3) (5 6))
     (g338687 (6) (2 7))
     (g338688 (5 4 3) ())
     (g338689 (7 3) (4 6)))
                    
        
))

(define mayer-results
    (list
    
        ;;test1
        '(  (g46494 (6 1) (6))
            (g46495 (3 6 0) (0 4))
            (g46496 (1) (3))
            (g46497 (5 0 6) (4 2))
            (g46501 (4 7) (7))
            (g46503 (5 2 0) (6 2))
            (g46504 (6 4 5) (0))
            (g46505 (1 2) (1))
            (g46506 (6 2 7 5) (7))
            (g46509 (0 3 2) (5 0))
            (g46510 (3 6) (4)))
            
        ;;test2
        '(
            (g46494 (6 1) (9))
            (g46495 (3 6 0) (0 4))
            (g46496 (1) (3))
            (g46497 (9) (4 2))
            (g46499 (7) (9)))
            
        ;;test3
        '(  (inst3 () (1)))
        
        ;;test4
        '(  (inst2 () (1)))
        
        ;;test5
        '(  (inst1 () (1)))
        
        ;;test6
        '(  (g46494 (7) (6)))
        
        ;;test7
        '(
            (g46494 (1 1) (2))
            (g46494 (1 1) (6))
            (g46494 (6 2) (2)))
            
            
        '((g46494 (6 1) (6))
 (g46495 (3 6 0) (0 4))
 (g46496 (1) (3))
 (g46497 (5 0 6) (4 2))
 (g46501 (4 7) (7))
 (g46503 (5 2 0) (6 2))
 (g46504 (6 4 5) (0))
 (g46505 (1 2) (1))
 (g46506 (6 2 7 5) (7))
 (g46509 (0 3 2) (5 0))
 (g46510 (3 6) (4)))
 
 
 '((g47826 (5) (4 2))
 (g47829 (0 3 5 1) (3 5))
 (g47830 (0 5 1) (1 4))
 (g47831 (7) (6 3))
 (g47834 (7) (4)))
 
 '((g62864 (6) (6))
 (g62865 (6 0 7) (1 2))
 (g62870 (6 3) (6))
 (g62871 (0 2 3) (4 7))
 (g62872 (5) (5 1))
 (g62873 (3 0 4) (3)))
 
 '((g77704 (0 5 2 6) (3))
 (g77707 (7 6 5 3) (0 3))
 (g77710 (6 4 3) (3))
 (g77712 (5 4 7 0) (2 4))
 (g77713 (1 0 7) (7 2))
 (g77714 (2 0) (5)))
 
 '((g92767 (5 7) (2 1))
 (g92770 (2 6) (2 0))
 (g92771 (0 4 5) (5))
 (g92772 (5 7 4 2) (0))
 (g92773 (7 0) (7))
 (g92775 (2 7) (3 5))
 (g92776 (7) (3)))
 
 '((g47826 (5) (4 2))
 (g47829 (0 3 5 1) (3 5))
 (g47830 (0 5 1) (1 4))
 (g47831 (7) (6 3))
 (g47834 (7) (4)))
 
 '((g170111 (5) (1))
 (g170120 (3) (4 0))
 (g170121 (1 7 5 3) (0)))
 
 '((g189528 (5) (0))
 (g189534 (6) (4 3))
 (g189538 (0 5) (2 1))
 (g189543 (2) (0 7)))
 
 '((g202769 (1) (6))
 (g202771 (0) (3 7))
 (g202782 (6 7 0) (4 0))
 (g202785 (6 2 5 1) (4 1)))
 
 '((g213925 (7) (5 4))
 (g213927 (4) (1 0))
 (g213928 (0 1 7 4) (0))
 (g213929 (4) (2))
 (g213930 (1) (3))
 (g213932 (2) (1)))
 
 '((g237227 (6 2 4) (4 3))
 (g237229 (6 3) (1 7))
 (g237233 (4 6) (2 0))
 (g237238 (3 4) (7 6))
 (g237244 (0 2 7) (4 2)))
 
 '((g248134 (7 6) (3))
 (g248140 (3) (7 5))
 (g248142 (5) (1 0))
 (g248143 (3) (2))
 (g248145 (2 3 5 4) (5 6)))
 
 '((g260813 (4) (2 4))
 (g260815 (7 4) (1))
 (g260817 (2) (2))
 (g260822 (6) (5 0))
 (g260826 (6) (7 3)))
 
 '((g283109 (4 3) (2))
 (g283114 (3 7 2 4) (5))
 (g283116 (4 5) (1))
 (g283118 (2 3 1) (6))
 (g283123 (6) (7 2)))
 
 '((g296826 (2 1) (0))
 (g296827 (2) (7))
 (g296829 (6 7) (3 5))
 (g296833 (5 0) (4)))
 
 '((g303226 (6) (0 4))
 (g303228 (5 6 7 0) (7 0))
 (g303229 (5) (1))
 (g303238 (4 5) (3 0))
 (g303241 (7 1 3) (6 1))
 (g303243 (1 4) (2)))
 
 '((g319410 (6) (7 6))
 (g319413 (0) (7))
 (g319415 (2 5 7) (0))
 (g319421 (5 2) (7 3))
 (g319423 (3) (7)))
 
 '((g338678 (3) (1))
 (g338686 (5 3) (5 6))
 (g338687 (6) (2 7))
 (g338689 (7 3) (4 6)))
 
 
))


(define test-all2
    (test-all)

    )


